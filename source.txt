;gravity driven Aggregation, a visual modeling tool by Thomas Ritschel


IncludeFile "linear_algebra.txt"
IncludeFile "Screen3DRequester.txt"  


;IncludeFile "matrix.pb"
;IncludeFile #PB_Compiler_Home + "examples/3d/Screen3DRequester.pb"
UsePNGImageEncoder()

Structure coordinates
  x.i
  y.i
  z.i
EndStructure  

Structure field_information
  cluster.l
  particle.l
EndStructure

Structure attach_info
  attaching_part.i
  attached_to_cluster.i
  attached_to_particle.i
EndStructure

; Structure attached_info
;   attached_to_particle.i
;   begin_of_cluster.i
; EndStructure  

Structure xy
  x.i
  y.i
EndStructure

Structure xyd
  x.d
  y.d
EndStructure   

Structure hist
  class.d
  amount.i
EndStructure

Structure quat
  x.d
  y.d
  z.d
  w.d
EndStructure  

Structure particle
  Array points.coordinates(0)
  maxx.i    ;box defined by particle for more efficient collision check
  minx.i
  maxy.i
  miny.i
  maxz.i
  minz.i
  nr_points.i
  id.i
  mass.d
  diameter.d
  List attached_to.i()
  Array rotation.d(2,2)
  rot.quat
  entity_handle.i
EndStructure  

Structure cluster
  Array particles.particle(0)
  maxx.i    ;box defined by cluster for more efficient collision check
  minx.i
  maxy.i
  miny.i
  maxz.i
  minz.i
  nr_particles.i
  mass.d
  diameter.d
  fractal_dim.d
  gyration.d
  diff.d
  hydrodyn.d
  freepath.d
  lifetime.d
EndStructure  

Structure timeseriespoint
  time.d
  mass.d
  gyration.d
  hydrodyn.d
  fractal.d
  peclet.d
  Array freeparts.d(2)
  Array attach_type.i(2)
  nr_clus.i
  meanz_rods.d
  meanz_spheres.d
  meanz_plates.d
  sdz_rods.d
  sdz_spheres.d
  sdz_plates.d
  corr_sphererod.d
  corr_sphereplate.d
  corr_rodplate.d
  Array attach_minerals.i(5) 
EndStructure  

Global Dim clusters.cluster(0)

Enumeration
  #Radio_uncontrained
  #Radio_mass
  #Radio_gyration
  #Radio_time
  #Radio_nr
  #Win_Plot
  #Win_Para
  #Text_dx
  #String_dx
  #Text_nx
  #Spin_nx
  #Text_ny
  #Spin_ny
  #Text_nz
  #Spin_nz
  #Radio_DLA
  #Radio_CCA
  #Radio_DLACCA
  #Radio_numbers
  #Radio_volumes
  #Radio_DLA_Point
  #Radio_DLA_Face
  #Radio_DLA_Edge
  #Radio_DLA_Corner
  #Text_Qz
  #String_sphere_volfrac
  #Spin_sphere_nr
  #Spin_sphere_diameter
  #Text_diameter
  #Text_Length
  #Text_Width
  #Text_Thickness
  #Text_rod_length
  #Text_rod_diameter
  #Text_Gt
  #String_rod_volfrac
  #Spin_rod_nr
  #Spin_rod_length
  #Spin_rod_diameter
  #Text_Il
  #Spin_plate_length
  #Spin_plate_width
  #Spin_plate_thickness
  #String_plate_volfrac
  #Spin_plate_nr
  #Text_Qz_DLVO
  #Text_Gt_DLVO
  #Text_Il_DLVO
  #Text_sphere_nr
  #Text_rod_nr
  #Text_plate_nr
  #Text_hamaker
  #Text_zetapot  
  #String_sphere_hamaker
  #String_rod_hamaker
  #String_plate_hamaker
  #String_sphere_zetapot
  #String_rod_zetapot
  #String_plate_zetapot
  #Button_Start
  #Frame_Grid
  #Frame_Geometry
  #Frame_Fractions
  #Frame_DLVO_Parameters
  #Frame_nucleus
  #Text_Temperature
  #String_Temperature
  #Text_ionic_strength
  #String_ionic_strength
  #Checkbox_sediment
  #Checkbox_detach
  #String_sigma
  #Text_sigma
  #String_crit
  #Checkbox_attach
  #Checkbox_rotate
  
EndEnumeration  

Global im_aggregate.i
Global im_DLVO.i
Global scale_x.d=0.6
Global scale_y.d=0.6
Global scale_z.d=0.15

;dimensions of rod assuming rectangular shape
Global rod_diameter.i
Global rod_length.i

;dimensions of plate assuming rectangular shape
Global plate_width.i
Global plate_length.i
Global plate_thickness.i

;radius of sphere assuming spherical shape
Global sphere_diameter.i=10

Global sphere_nr.i
Global rod_nr.i
Global plate_nr.i
Global sphere_vol.d
Global rod_vol.d
Global plate_vol.d   
Global plate_gyration.d
Global rod_gyration.d
Global sphere_gyration.d
Global n_monomono.i
Global n_monopoly.i
Global n_polypoly.i
Global Dim attach_minerals.i(3,3) 
  
Global allow_attach.b
Global allow_detach.b
Global sediment.b
Global allow_rotate.b
Global calculate_fractals.i
Global calculate_gyration.i
Global nr_clusters.i      
Global elapsedtime.i
Global roundmode.w=%0000011101111111
Global FPU_ControlWord.w=%0000001101111111
Global hugenumber.d=Pow(10,25)
;Global count.i=-1
Global nx.i
Global ny.i
Global nz.i
Global dx.d
Global mode_dla.i
Global mode.i
Global mode_fraction.i
Global total_mass.i
Global deskwidth.i
Global deskheight.i
; Global periodic_x.i
; Global periodic_y.i
; Global periodic_z.i

Global chance_sum.i=chance_rod+chance_plate+chance_sphere

Global e_charge.d=1.60217657E-19 ;Coulombs
Global k_boltz.d=1.38065E-23     ;J/K
Global temperature.d=298         ;Kelvin
Global e_zero.d=8.854187E-12     ;F/m
Global e_rel.d=80.1
Global avogadro.d=6.02214129E+23  ;1/mol
Global rod_zetapot.d=-0.003       ;volts
Global rod_hamaker.d=2.29E-20
Global plate_zetapot.d=-0.003  ;volts
Global plate_hamaker.d=2.29E-20
Global sphere_zetapot.d=-0.003  ;volts
Global sphere_hamaker.d=2.29E-20
Global water_hamaker.d=3.7E-20
Global sigma.d=5E-10  ;collision radius, 0.5nm

Global camx.d
Global camy.d
Global camz.d
Global dircamx.d
Global dircamy.d
Global dircamz.d
Global camfov.d

Global Dim hamakers.d(3,3)
Global Dim chances.d(3,3)
Global Dim chances_detach.d(3,3)
Global Dim energies.d(3,3)
Global Dim energies_detach.d(3,3)

; For i=0 To 3:For j=0 To 3
;     energies(i,j)=0
; ; Next j:Next i    
; 
; Global zetapot.d  ;volts
; Global plate_area.d
; Global length
; Global hamaker.d
; Global radius1.d
; Global radius2.d
; Global zetapot1.d
; Global zetapot2.d

Global sphere_m.i
Global cylinder_m.i
Global cube_m.i
Global material_sphere.i
Global material_plate.i
Global material_rod.i
Global geometry.i
Global camera.i
Global render.i
Global sprite.i


Global ionic_strength.d=1 ;mmol

;definition of aggregate types follows

Global sphere.particle
; Global sphere_reduced.particle
sphere\id=1
; sphere_reduced\id=1
Global rod.particle
rod\id=2
Global plate.particle
plate\id=3
Global qz_gyr.d
Global gt_gyr.d
Global il_gyr.d

Global time.d
Global timestep.d
Global largest_cluster.i
Global nr_largest_cluster.i

Global Dim masses.hist(0)
;Global Dim sizes.hist(0)
Global Dim fractal_dims.hist(0)
Global Dim gyration.hist(0)

Global Dim dlvo_sphere_sphere.d(1000)
Global Dim dlvo_sphere_rod.d(1000)
Global Dim dlvo_sphere_plate.d(1000)
Global Dim dlvo_rod_rod.d(1000)
Global Dim dlvo_rod_plate.d(1000)
Global Dim dlvo_plate_plate.d(1000)
Global Dim field.b(0,0,0)
Global Dim field_info.field_information(0,0,0)
Global Dim timeseries.timeseriespoint(0)
Global n_timeseries.i=-1
Global timeseries_maxmass.d
Global timeseries_maxgyration.d
Global timeseries_maxfractal.d
Global termination_type.b
Global termination_crit.d
Global show_dlvo.b
Global counter.i
Global nr_clusters_init.i

Global Dim profiles.i(3,0)

Procedure export_data(name.s)
  
  If MessageRequester("Info","Export entire field?"+Chr(13)+Chr(10)+StrD(time),#PB_MessageRequester_YesNo)=#PB_MessageRequester_Yes
  dir=ExamineDirectory(#PB_Any,GetCurrentDirectory()+"aggregateout","*.*")
  If Not IsDirectory(dir)
    CreateDirectory(GetCurrentDirectory()+"aggregateout")
  EndIf  
CreateFile(0,GetCurrentDirectory()+"aggregateout\"+name+"_"+Str(nz+1)+"_"+Str(ny+1)+"_"+Str(nx+1)+".raw")
;*raw=AllocateMemory((nx+1)*(ny+1)*(nz+1))

For i=0 To nx:For j=0 To ny:For k=0 To nz
      WriteByte(0,field(i,j,k))
Next k:Next j: Next i     
CloseFile(0)
EndIf

If MessageRequester("Info","Export largest cluster?"+Chr(13)+Chr(10)+StrD(time),#PB_MessageRequester_YesNo)=#PB_MessageRequester_Yes
  dir=ExamineDirectory(#PB_Any,GetCurrentDirectory()+"aggregateout","*.*")
  If Not IsDirectory(dir)
    CreateDirectory(GetCurrentDirectory()+"aggregateout")
  EndIf  
  
  
  i_width.i=clusters(nr_largest_cluster)\maxx-clusters(nr_largest_cluster)\minx+1
  i_height.i=clusters(nr_largest_cluster)\maxy-clusters(nr_largest_cluster)\miny+1
  i_depth.i=clusters(nr_largest_cluster)\maxz-clusters(nr_largest_cluster)\minz+1
  
  CreateFile(0,GetCurrentDirectory()+"aggregateout\"+name+"_cluster_"+Str(i_depth)+"_"+Str(i_height)+"_"+Str(i_width)+".raw")
  
For i=clusters(nr_largest_cluster)\minx To clusters(nr_largest_cluster)\maxx:For j=clusters(nr_largest_cluster)\miny To clusters(nr_largest_cluster)\maxy:For k=clusters(nr_largest_cluster)\minz To clusters(nr_largest_cluster)\maxz
   If field_info(i,j,k)\cluster-1=nr_largest_cluster:WriteByte(0,field(i,j,k)):Else:WriteByte(0,0):EndIf
Next k:Next j: Next i     
CloseFile(0)  
  
EndIf
If MessageRequester("Info","Export largest histogramm of distances?"+Chr(13)+Chr(10)+StrD(time),#PB_MessageRequester_YesNo)=#PB_MessageRequester_Yes
a=1
b=2

dist.d
rd.i
tmp.i=nr_largest_cluster
maxlen.i=Round(Sqr(nx*nx+ny*ny+nz*nz),#PB_Round_Up)
Dim his.i(maxlen)
For i=0 To ArraySize(clusters(tmp)\particles())
  For j=0 To ArraySize(clusters(tmp)\particles(i)\points())
    If clusters(tmp)\particles(i)\id=a
    For k=0 To ArraySize(clusters(tmp)\particles())
      For l=0 To ArraySize(clusters(tmp)\particles(k)\points())
        
        If clusters(tmp)\particles(k)\id=b
          dist=Sqr(Pow(clusters(tmp)\particles(i)\points(j)\x-clusters(tmp)\particles(k)\points(l)\x,2)+Pow(clusters(tmp)\particles(i)\points(j)\y-clusters(tmp)\particles(k)\points(l)\y,2)+Pow(clusters(tmp)\particles(i)\points(j)\z-clusters(tmp)\particles(k)\points(l)\z,2))
          rd=Round(dist,#PB_Round_Nearest)
          his(rd)+1
        EndIf  
          
      Next l
      Next k
        EndIf
      Next j  
Next i  

CreateFile(0,GetCurrentDirectory()+"aggregateout\"+"distances_sphere_rod.txt")

For i=0 To nx
  
  WriteStringN(0,Str(i)+Chr(9)+Str(his(i)))
  
Next i  

CloseFile(0)

a=1
b=3

dist.d
rd.i
tmp.i=nr_largest_cluster
Dim his.i(maxlen)
For i=0 To ArraySize(clusters(tmp)\particles())
  For j=0 To ArraySize(clusters(tmp)\particles(i)\points())
    If clusters(tmp)\particles(i)\id=a
    For k=0 To ArraySize(clusters(tmp)\particles())
      For l=0 To ArraySize(clusters(tmp)\particles(k)\points())
        
        If clusters(tmp)\particles(k)\id=b
          dist=Sqr(Pow(clusters(tmp)\particles(i)\points(j)\x-clusters(tmp)\particles(k)\points(l)\x,2)+Pow(clusters(tmp)\particles(i)\points(j)\y-clusters(tmp)\particles(k)\points(l)\y,2)+Pow(clusters(tmp)\particles(i)\points(j)\z-clusters(tmp)\particles(k)\points(l)\z,2))
          rd=Round(dist,#PB_Round_Nearest)
          his(rd)+1
        EndIf  
          
      Next l
      Next k
        EndIf
      Next j  
Next i  

CreateFile(0,GetCurrentDirectory()+"aggregateout\"+"distances_sphere_plate.txt")

For i=0 To nx
  
  WriteStringN(0,Str(i)+Chr(9)+Str(his(i)))
  
Next i  

CloseFile(0)


a=2
b=3

dist.d
rd.i
tmp.i=nr_largest_cluster
Dim his.i(maxlen)
For i=0 To ArraySize(clusters(tmp)\particles())
  For j=0 To ArraySize(clusters(tmp)\particles(i)\points())
    If clusters(tmp)\particles(i)\id=a
    For k=0 To ArraySize(clusters(tmp)\particles())
      For l=0 To ArraySize(clusters(tmp)\particles(k)\points())
        
        If clusters(tmp)\particles(k)\id=b
          dist=Sqr(Pow(clusters(tmp)\particles(i)\points(j)\x-clusters(tmp)\particles(k)\points(l)\x,2)+Pow(clusters(tmp)\particles(i)\points(j)\y-clusters(tmp)\particles(k)\points(l)\y,2)+Pow(clusters(tmp)\particles(i)\points(j)\z-clusters(tmp)\particles(k)\points(l)\z,2))
          rd=Round(dist,#PB_Round_Nearest)
          his(rd)+1
        EndIf  
          
      Next l
      Next k
        EndIf
      Next j  
Next i  

CreateFile(0,GetCurrentDirectory()+"aggregateout\"+"distances_rod_plate.txt")

For i=0 To nx
  
  WriteStringN(0,Str(i)+Chr(9)+Str(his(i)))
  
Next i  

CloseFile(0)
EndIf
EndProcedure  

Procedure get_histograms()
  
  ;masses
  n_timeseries+1
  ReDim timeseries.timeseriespoint(n_timeseries)
  timeseries(n_timeseries)\time=time
  timeseries(n_timeseries)\nr_clus=nr_clusters+1
  If n_timeseries>0
  timeseries(n_timeseries)\attach_type(0)=timeseries(n_timeseries-1)\attach_type(0)+n_monomono:n_monomono=0
  timeseries(n_timeseries)\attach_type(1)=timeseries(n_timeseries-1)\attach_type(1)+n_monopoly:n_monopoly=0
  timeseries(n_timeseries)\attach_type(2)=timeseries(n_timeseries-1)\attach_type(2)+n_polypoly:n_polypoly=0
Else
    timeseries(0)\attach_type(0)=0
  timeseries(0)\attach_type(1)=0
  timeseries(0)\attach_type(2)=0
  
EndIf
  timeseries(n_timeseries)\attach_minerals(0)=attach_minerals(1,1)
  timeseries(n_timeseries)\attach_minerals(1)=attach_minerals(1,2)+attach_minerals(2,1) 
  timeseries(n_timeseries)\attach_minerals(2)=attach_minerals(1,3)+attach_minerals(3,1)
  timeseries(n_timeseries)\attach_minerals(3)=attach_minerals(2,2)
  timeseries(n_timeseries)\attach_minerals(4)=attach_minerals(2,3)+attach_minerals(3,2)
  timeseries(n_timeseries)\attach_minerals(5)=attach_minerals(3,3)

  Dim temp.d(0)
  Dim masses.hist(0)
  count=-1
  mean.d
  For i=0 To nr_clusters
    If clusters(i)\nr_particles=1
      timeseries(n_timeseries)\freeparts(clusters(i)\particles(0)\id-1)+1
      clusters(i)\lifetime+timestep     
    EndIf
      count+1
      ReDim temp.d(count)
      temp(count)=clusters(i)\mass
      mean+clusters(i)\mass
   ; EndIf
    Next
    timeseries(n_timeseries)\freeparts(0)/sphere_nr
    timeseries(n_timeseries)\freeparts(1)/rod_nr
    timeseries(n_timeseries)\freeparts(2)/plate_nr
    timeseries(n_timeseries)\mass=mean/(count+1)
    If timeseries(n_timeseries)\mass>timeseries_maxmass:timeseries_maxmass=timeseries(n_timeseries)\mass:EndIf
    mean=0
  SortArray(temp(),#PB_Sort_Ascending)
  count=-1
  For i=0 To ArraySize(temp())
    If i=0
      count+1
      ReDim masses.hist(count)
      masses(count)\class=temp(i)
    Else
      If Not masses(count)\class=temp(i)
        count+1
        ReDim masses.hist(count)
        masses(count)\class=temp(i)
      EndIf  
    EndIf     
  Next i 
  For j=0 To nr_clusters
    For i=0 To ArraySize(masses())
      If clusters(j)\mass=masses(i)\class:masses(i)\amount+masses(i)\class:EndIf
    Next i  
  Next
  
  ;   ;diameters
  ;   Dim temp.d(0)
  ;   Dim sizes.hist(0)
  ;   count=-1
  ;   For i=0 To nr_clusters
  ;     If Not clusters(i)\nr_particles=1
  ;     count+1
  ;     ReDim temp.d(count)
  ;     temp(count)=clusters(i)\diameter 
  ;     EndIf
  ;   Next   
  ;   SortArray(temp(),#PB_Sort_Ascending)
  ;   count=-1
  ;   For i=0 To ArraySize(temp())
  ;     If i=0
  ;      count+1
  ;      ReDim sizes.hist(count)
  ;      sizes(count)\class=temp(i)
  ;     Else
  ;       If Not sizes(count)\class=temp(i)
  ;         count+1
  ;         ReDim sizes.hist(count)
  ;         sizes(count)\class=temp(i)
  ;       EndIf  
  ;     EndIf     
  ;   Next i 
  ;   For j=0 To nr_clusters
  ;     For i=0 To ArraySize(sizes())
  ;       If clusters(j)\diameter=sizes(i)\class:sizes(i)\amount+clusters(j)\mass:EndIf
  ;     Next i  
  ;   Next  
  
  ;gyrationsd
  Dim temp.d(0)
  Dim gyration.hist(0)
  count=-1
  For i=0 To nr_clusters
   ; If Not clusters(i)\nr_particles=1
      count+1
      ReDim temp.d(count)
      temp(count)=clusters(i)\gyration
      mean+clusters(i)\gyration
    ;EndIf
    Next   
    timeseries(n_timeseries)\gyration=mean/(count+1)
    If timeseries(n_timeseries)\gyration>timeseries_maxgyration:timeseries_maxgyration=timeseries(n_timeseries)\gyration:EndIf
    mean=0
  SortArray(temp(),#PB_Sort_Ascending)
  count=-1
  For i=0 To ArraySize(temp())
    If i=0
      count+1
      ReDim gyration.hist(count)
      gyration(count)\class=temp(i)
    Else
      If Not gyration(count)\class=temp(i)
        count+1
        ReDim gyration.hist(count)
        gyration(count)\class=temp(i)
      EndIf  
    EndIf     
  Next i 
  For j=0 To nr_clusters
    For i=0 To ArraySize(gyration())
      If clusters(j)\gyration=gyration(i)\class:gyration(i)\amount+clusters(j)\mass:EndIf
    Next i  
  Next
  
  mean=0  
  For i=0 To nr_clusters
    mean+clusters(i)\hydrodyn
  Next i  
  timeseries(n_timeseries)\hydrodyn=mean/(nr_clusters+1)
  
  mean=0
  For i=0 To nr_clusters    
    mean+1650000*9.81*dx*dx*dx*clusters(i)\mass/(6*#PI)/clusters(i)\diff
  Next i 
  timeseries(n_timeseries)\peclet=mean/(nr_clusters+1)
  
  ;fractal dims
  mean=0
  Dim temp.d(0)
  Dim fractal_dims.hist(0)
  count=-1
  For i=0 To nr_clusters
    ;If Not clusters(i)\nr_particles=1
      count+1
      ReDim temp.d(count)
      temp(count)=clusters(i)\fractal_dim 
      mean+clusters(i)\fractal_dim
   ; EndIf
    Next   
    timeseries(n_timeseries)\fractal=mean/(count+1)
    If timeseries(n_timeseries)\fractal>timeseries_maxfractal:timeseries_maxfractal=timeseries(n_timeseries)\fractal:EndIf
  SortArray(temp(),#PB_Sort_Ascending)
  count=-1
  For i=0 To ArraySize(temp())
    If i=0
      count+1
      ReDim fractal_dims.hist(count)
      fractal_dims(count)\class=temp(i)
    Else
      If Not fractal_dims(count)\class=temp(i)
        count+1
        ReDim fractal_dims.hist(count)
        fractal_dims(count)\class=temp(i)
      EndIf  
    EndIf     
  Next i 
  For j=0 To nr_clusters
    For i=0 To ArraySize(fractal_dims())
     ; If Not clusters(j)\nr_particles=1
        If clusters(j)\fractal_dim=fractal_dims(i)\class:fractal_dims(i)\amount+clusters(j)\mass:EndIf
      ;EndIf  
    Next i  
  Next  
  
  meansphere.d=sphere\nr_points*sphere_nr
  meanrod.d=rod\nr_points*rod_nr
  meanplate.d=plate\nr_points*plate_nr
  
  meanzsphere.d
  meanzrod.d
  meanzplate.d
  zvarsphere.d
  zvarrod.d
  zvarplate.d
  corr12.d
  corr13.d
  corr23.d
  var1.d
  var2.d
  var3.d
  
 For j=0 To ny   
   meanzsphere+j*profiles(1,j)
   meanzrod+j*profiles(2,j)
   meanzplate+j*profiles(3,j)
 Next j
  
  meanzsphere/(sphere\nr_points*sphere_nr)
   meanzrod/(rod\nr_points*rod_nr)
   meanzplate/(plate\nr_points*plate_nr)
 
   meansphere/(ny+1)
   meanrod/(ny+1)
   meanplate/(ny+1)
   
   For j=0 To ny  
     var1+(profiles(1,j)-meanzsphere)*(profiles(1,j)-meanzsphere)
     var2+(profiles(2,j)-meanzrod)*(profiles(2,j)-meanzrod)
     var3+(profiles(3,j)-meanzplate)*(profiles(3,j)-meanzplate)
   corr12+(profiles(1,j)-meansphere)*(profiles(2,j)-meanrod)
   corr13+(profiles(1,j)-meansphere)*(profiles(3,j)-meanplate)
   corr23+(profiles(2,j)-meanrod)*(profiles(3,j)-meanplate)
   zvarsphere+profiles(1,j)*(j-meanzsphere)*(j-meanzsphere)
   zvarrod+profiles(2,j)*(j-meanzrod)*(j-meanzrod)
   zvarplate+profiles(3,j)*(j-meanzplate)*(j-meanzplate)
 Next j
 corr12/ny
 corr13/ny
 corr23/ny
 var1/ny
 var2/ny
 var3/ny
 
 timeseries(n_timeseries)\sdz_spheres=Sqr(zvarsphere/(sphere\nr_points*sphere_nr))
 timeseries(n_timeseries)\sdz_rods=Sqr(zvarrod/(rod\nr_points*rod_nr))
 timeseries(n_timeseries)\sdz_plates=Sqr(zvarplate/(plate\nr_points*plate_nr))
 
 timeseries(n_timeseries)\corr_sphererod=corr12/Sqr(var1*var2)
 timeseries(n_timeseries)\corr_sphereplate=corr13/Sqr(var1*var3)
 timeseries(n_timeseries)\corr_rodplate=corr23/Sqr(var2*var3)
 
 timeseries(n_timeseries)\meanz_spheres=meanzsphere
 timeseries(n_timeseries)\meanz_rods=meanzrod
 timeseries(n_timeseries)\meanz_plates=meanzplate
 
 EndProcedure

Procedure.d random_cont(max.d,significant_digits.i) ;creates a randomnumber from 0 to max
  
  result.d
  exp.i=-Round(Log10(max),#PB_Round_Up)+significant_digits
  range.i=Round(max*Pow(10,exp),#PB_Round_Down)
  result=Random(range)/(Pow(10,exp))
  ProcedureReturn result
  
EndProcedure  

Procedure.b check_collision(*target.cluster)
  
  *p1=@field()
  particlesize=SizeOf(particle)
  pointsize=SizeOf(coordinates)
  size1=nz+1
  size2=(nz+1)*(ny+1)
  collision.i
  
  !mov rax,[p.p_target]
  !mov rbx,[p.p_p1]
  !mov rdi,[rax]
  !mov rcx,[rax+56]
  !.loopbox:
  !mov r15,[rdi+8]   ;test for out of box
  !cmp r15,[v_nx]
  !jg .collision
  !mov r15,[rdi+16]
  !cmp r15,0
  !jl .collision
  !mov r15,[rdi+24]
  !cmp r15,[v_ny]
  !jg .collision
  !mov r15,[rdi+32]
  !cmp r15,0
  !jl .collision
  !mov r15,[rdi+40]
  !cmp r15,[v_nz]
  !jg .collision
  !mov r15,[rdi+48]
  !cmp r15,0
  !jl .collision 
  !add rdi,[p.v_particlesize]
  !sub rcx,1
  !jnz .loopbox
  !mov r14,[p.v_size1]
  !mov r15,[p.v_size2]
  !mov rdi,[rax]
  !mov r8,[rax+56]  
  !.loopparticles:
  !mov r9,[rdi]
  !mov r10,[rdi+56]
  !.looppoints:
  !mov r11,[r9]
  !mov r12,[r9+8]
  !mov r13,[r9+16]
  !imul r11,r15
  !imul r12,r14
  !add r13,r11
  !add r13,r12
  !cmp byte [rbx+r13],0
  !jne .collision  
  !add r9,24
  !sub r10,1
  !jnz .looppoints   
  !add rdi,[p.v_particlesize]
  !sub r8,1
  !jnz .loopparticles
  !jmp .out
  !.collision:
  !mov qword [p.v_collision],1
  !.out:
  
  If collision:ProcedureReturn 1:EndIf
  
  ProcedureReturn 0
  
EndProcedure  

Procedure quat_mul(*a.quat, *b.quat, *result.quat)
  
  *result\w=*a\w**b\w-(*a\x**b\x+*a\y**b\y+*a\z**b\z)
  *result\x=*a\w**b\x+*a\x**b\w+*a\y**b\z-*a\z**b\y
  *result\y=*a\w**b\y+*a\y**b\w+*a\z**b\x-*a\x**b\z
  *result\z=*a\w**b\z+*a\z**b\w+*a\x**b\y-*a\y**b\x
  
EndProcedure  

Procedure rotate_cluster(*target.cluster,rot_mode.i)
  
  
  ;mode=0  do not rotate
  ;mode=1  rotate by 90 degrees around x
  ;mode=2  rotate by -90 degrees around x
  ;mode=3  rotate by 90 degrees around y
  ;mode=4  rotate by -90 degrees around y
  ;mode=5  rotate by 90 degrees around z
  ;mode=6  rotate by -90 degrees around z
  
  ;first get centers of mass
  cx.i
  cy.i
  cz.i
  count.i
  ;   temptarget.cluster
  ;   CopyStructure(*target,@temptarget,cluster)
  
  For i=0 To ArraySize(*target\particles())
    For j=0 To ArraySize(*target\particles(i)\points())
      count+1
      cx+*target\particles(i)\points(j)\x
      cy+*target\particles(i)\points(j)\y
      cz+*target\particles(i)\points(j)\z
    Next   
  Next 
  ;to randomize center of mass if center is not at cell 
  test=(cx%count)
  cx=Round(cx/count,#PB_Round_Down)
  If Random_cont(1,6)<test/count:cx+1:EndIf
  test=(cy%count)
  cy=Round(cy/count,#PB_Round_Down)
  If Random_cont(1,6)<test/count:cy+1:EndIf
  test=(cz%count)
  cz=Round(cz/count,#PB_Round_Down)
  rot.quat
  If Random_cont(1,6)<test/count:cz+1:EndIf

  Dim rot_matrix.d(2,2)
  Dim temp_matrix.d(2,2)
  Select rot_mode
    Case 0
      rot_matrix(0,0)=1
      rot_matrix(1,1)=1
      rot_matrix(2,2)=1
      rot\w=1
    Case 1    
      rot_matrix(0,0)=1
      rot_matrix(1,2)=-1
      rot_matrix(2,1)=1
      rot\w=Sqr(2)/2
      rot\x=Sqr(2)/2
      For i=0 To ArraySize(*target\particles())
        For j=0 To ArraySize(*target\particles(i)\points())
          temp=*target\particles(i)\points(j)\y
          *target\particles(i)\points(j)\y=-*target\particles(i)\points(j)\z+cz+cy
          *target\particles(i)\points(j)\z=-cy+temp+cz
        Next
      Next
    Case 2    
      rot_matrix(0,0)=1
      rot_matrix(1,2)=1
      rot_matrix(2,1)=-1
      rot\w=Sqr(2)/2
      rot\x=-Sqr(2)/2
      For i=0 To ArraySize(*target\particles())
        For j=0 To ArraySize(*target\particles(i)\points())
          temp=*target\particles(i)\points(j)\y
          *target\particles(i)\points(j)\y=*target\particles(i)\points(j)\z-cz+cy
          *target\particles(i)\points(j)\z=cy-temp+cz
        Next
      Next
    Case 3
      rot_matrix(1,1)=1
      rot_matrix(0,2)=1
      rot_matrix(2,0)=-1
      rot\w=Sqr(2)/2
      rot\y=Sqr(2)/2
      For i=0 To ArraySize(*target\particles())
        For j=0 To ArraySize(*target\particles(i)\points())
          temp=*target\particles(i)\points(j)\x
          *target\particles(i)\points(j)\x=*target\particles(i)\points(j)\z-cz+cx
          *target\particles(i)\points(j)\z=cx-temp+cz
        Next
      Next
    Case 4  
      rot_matrix(1,1)=1
      rot_matrix(0,2)=-1
      rot_matrix(2,0)=1
      rot\w=Sqr(2)/2
      rot\y=-Sqr(2)/2
      For i=0 To ArraySize(*target\particles())
        For j=0 To ArraySize(*target\particles(i)\points())
          temp=*target\particles(i)\points(j)\x
          *target\particles(i)\points(j)\x=-*target\particles(i)\points(j)\z+cz+cx
          *target\particles(i)\points(j)\z=-cx+temp+cz
        Next
      Next
    Case 5
      rot_matrix(2,2)=1
      rot_matrix(0,1)=-1
      rot_matrix(1,0)=1
      rot\w=Sqr(2)/2
      rot\z=Sqr(2)/2
      For i=0 To ArraySize(*target\particles())
        For j=0 To ArraySize(*target\particles(i)\points())
          temp=*target\particles(i)\points(j)\x
          *target\particles(i)\points(j)\x=*target\particles(i)\points(j)\y-cy+cx
          *target\particles(i)\points(j)\y=cx-temp+cy
        Next
      Next
    Case 6
      rot_matrix(2,2)=1
      rot_matrix(0,1)=1
      rot_matrix(1,0)=-1
      rot\w=Sqr(2)/2
      rot\z=-Sqr(2)/2
      For i=0 To ArraySize(*target\particles())
        For j=0 To ArraySize(*target\particles(i)\points())
          temp=*target\particles(i)\points(j)\x
          *target\particles(i)\points(j)\x=-*target\particles(i)\points(j)\y+cy+cx
          *target\particles(i)\points(j)\y=-cx+temp+cy
        Next
      Next
  EndSelect    
  
  *target\maxx=0
  *target\maxy=0
  *target\maxz=0
  *target\minx=nx
  *target\miny=ny
  *target\minz=nz
  For i=0 To ArraySize(*target\particles())
    For j=0 To ArraySize(*target\particles(i)\points())
      If *target\particles(i)\points(j)\x>*target\maxx:*target\maxx=*target\particles(i)\points(j)\x:EndIf
      If *target\particles(i)\points(j)\y>*target\maxy:*target\maxy=*target\particles(i)\points(j)\y:EndIf
      If *target\particles(i)\points(j)\z>*target\maxz:*target\maxz=*target\particles(i)\points(j)\z:EndIf
      If *target\particles(i)\points(j)\x<*target\minx:*target\minx=*target\particles(i)\points(j)\x:EndIf
      If *target\particles(i)\points(j)\y<*target\miny:*target\miny=*target\particles(i)\points(j)\y:EndIf
      If *target\particles(i)\points(j)\z<*target\minz:*target\minz=*target\particles(i)\points(j)\z:EndIf
    Next
  Next
  
  For i=0 To ArraySize(*target\particles())
    *target\particles(i)\minx=nx
    *target\particles(i)\maxx=0
    *target\particles(i)\miny=ny
    *target\particles(i)\maxy=0
    *target\particles(i)\minz=nz
    *target\particles(i)\maxz=0
    For j=0 To ArraySize(*target\particles(i)\points())
      If *target\particles(i)\points(j)\x>*target\particles(i)\maxx:*target\particles(i)\maxx=*target\particles(i)\points(j)\x:EndIf
      If *target\particles(i)\points(j)\y>*target\particles(i)\maxy:*target\particles(i)\maxy=*target\particles(i)\points(j)\y:EndIf
      If *target\particles(i)\points(j)\z>*target\particles(i)\maxz:*target\particles(i)\maxz=*target\particles(i)\points(j)\z:EndIf
      If *target\particles(i)\points(j)\x<*target\particles(i)\minx:*target\particles(i)\minx=*target\particles(i)\points(j)\x:EndIf
      If *target\particles(i)\points(j)\y<*target\particles(i)\miny:*target\particles(i)\miny=*target\particles(i)\points(j)\y:EndIf
      If *target\particles(i)\points(j)\z<*target\particles(i)\minz:*target\particles(i)\minz=*target\particles(i)\points(j)\z:EndIf
    Next   
  Next   
  ;   EndIf  
  
  If check_collision(*target)
    
    Select rot_mode
        
      Case 2    
        For i=0 To ArraySize(*target\particles())
          For j=0 To ArraySize(*target\particles(i)\points())
            temp=*target\particles(i)\points(j)\y
            *target\particles(i)\points(j)\y=-*target\particles(i)\points(j)\z+cz+cy
            *target\particles(i)\points(j)\z=-cy+temp+cz
          Next
        Next
      Case 1    
        For i=0 To ArraySize(*target\particles())
          For j=0 To ArraySize(*target\particles(i)\points())
            temp=*target\particles(i)\points(j)\y
            *target\particles(i)\points(j)\y=*target\particles(i)\points(j)\z-cz+cy
            *target\particles(i)\points(j)\z=cy-temp+cz
          Next
        Next
      Case 4
        For i=0 To ArraySize(*target\particles())
          For j=0 To ArraySize(*target\particles(i)\points())
            temp=*target\particles(i)\points(j)\x
            *target\particles(i)\points(j)\x=*target\particles(i)\points(j)\z-cz+cx
            *target\particles(i)\points(j)\z=cx-temp+cz
          Next
        Next
      Case 3  
        For i=0 To ArraySize(*target\particles())
          For j=0 To ArraySize(*target\particles(i)\points())
            temp=*target\particles(i)\points(j)\x
            *target\particles(i)\points(j)\x=-*target\particles(i)\points(j)\z+cz+cx
            *target\particles(i)\points(j)\z=-cx+temp+cz
          Next
        Next
      Case 6
        For i=0 To ArraySize(*target\particles())
          For j=0 To ArraySize(*target\particles(i)\points())
            temp=*target\particles(i)\points(j)\x
            *target\particles(i)\points(j)\x=*target\particles(i)\points(j)\y-cy+cx
            *target\particles(i)\points(j)\y=cx-temp+cy
          Next
        Next
      Case 5
        For i=0 To ArraySize(*target\particles())
          For j=0 To ArraySize(*target\particles(i)\points())
            temp=*target\particles(i)\points(j)\x
            *target\particles(i)\points(j)\x=-*target\particles(i)\points(j)\y+cy+cx
            *target\particles(i)\points(j)\y=-cx+temp+cy
          Next
        Next
    EndSelect    
    
    *target\maxx=0
    *target\maxy=0
    *target\maxz=0
    *target\minx=nx
    *target\miny=ny
    *target\minz=nz
    For i=0 To ArraySize(*target\particles())
      For j=0 To ArraySize(*target\particles(i)\points())
        If *target\particles(i)\points(j)\x>*target\maxx:*target\maxx=*target\particles(i)\points(j)\x:EndIf
        If *target\particles(i)\points(j)\y>*target\maxy:*target\maxy=*target\particles(i)\points(j)\y:EndIf
        If *target\particles(i)\points(j)\z>*target\maxz:*target\maxz=*target\particles(i)\points(j)\z:EndIf
        If *target\particles(i)\points(j)\x<*target\minx:*target\minx=*target\particles(i)\points(j)\x:EndIf
        If *target\particles(i)\points(j)\y<*target\miny:*target\miny=*target\particles(i)\points(j)\y:EndIf
        If *target\particles(i)\points(j)\z<*target\minz:*target\minz=*target\particles(i)\points(j)\z:EndIf
      Next
    Next
    
    For i=0 To ArraySize(*target\particles())
      *target\particles(i)\minx=nx
      *target\particles(i)\maxx=0
      *target\particles(i)\miny=ny
      *target\particles(i)\maxy=0
      *target\particles(i)\minz=nz
      *target\particles(i)\maxz=0
      For j=0 To ArraySize(*target\particles(i)\points())
        If *target\particles(i)\points(j)\x>*target\particles(i)\maxx:*target\particles(i)\maxx=*target\particles(i)\points(j)\x:EndIf
        If *target\particles(i)\points(j)\y>*target\particles(i)\maxy:*target\particles(i)\maxy=*target\particles(i)\points(j)\y:EndIf
        If *target\particles(i)\points(j)\z>*target\particles(i)\maxz:*target\particles(i)\maxz=*target\particles(i)\points(j)\z:EndIf
        If *target\particles(i)\points(j)\x<*target\particles(i)\minx:*target\particles(i)\minx=*target\particles(i)\points(j)\x:EndIf
        If *target\particles(i)\points(j)\y<*target\particles(i)\miny:*target\particles(i)\miny=*target\particles(i)\points(j)\y:EndIf
        If *target\particles(i)\points(j)\z<*target\particles(i)\minz:*target\particles(i)\minz=*target\particles(i)\points(j)\z:EndIf
      Next   
    Next 
    
   Else
    For i=0 To ArraySize(*target\particles())
      
      MoveEntity(*target\particles(i)\entity_handle,(*target\particles(i)\maxx+*target\particles(i)\minx)/2,(*target\particles(i)\maxy+*target\particles(i)\miny)/2,(*target\particles(i)\maxz+*target\particles(i)\minz)/2,#PB_Absolute)
      
      ;RotateEntity(*target\particles(i)\entity_handle,rotx*180/#PI,roty*180/#PI,rotz*180/#PI,#PB_Absolute) 
      
      Dim orientation.d(2,0)
      Select rot_mode
        Case 1
          orientation(0,0)=90
          orientation(1,0)=0
          orientation(2,0)=0
          ;Pitch(EntityID(*target\particles(i)\entity_handle),90, #PB_World)
          ;  RotateEntity(*target\particles(i)\entity_handle,90,0,0,#PB_Relative)
        Case 2
          orientation(0,0)=-90
          orientation(1,0)=0
          orientation(2,0)=0
          ;Pitch(EntityID(*target\particles(i)\entity_handle),-90, #PB_World)
          ; RotateEntity(*target\particles(i)\entity_handle,270,0,0,#PB_Relative)
        Case 3
          orientation(0,0)=0
          orientation(1,0)=90
          orientation(2,0)=0
          ; Yaw(EntityID(*target\particles(i)\entity_handle),90,#PB_World) 
          ;RotateEntity(*target\particles(i)\entity_handle,0,90,0,#PB_Relative)
        Case 4
          orientation(0,0)=0
          orientation(1,0)=-90
          orientation(2,0)=0
          ; Yaw(EntityID(*target\particles(i)\entity_handle),-90,#PB_World)
          ;RotateEntity(*target\particles(i)\entity_handle,0,270,0,#PB_Relative)
        Case 5
          orientation(0,0)=0
          orientation(1,0)=0
          orientation(2,0)=90
          ;    Roll(EntityID(*target\particles(i)\entity_handle),90,#PB_World)
          ;RotateEntity(*target\particles(i)\entity_handle,0,0,90,#PB_Relative)
        Case 6
          orientation(0,0)=0
          orientation(1,0)=0
          orientation(2,0)=-90
          ;Roll(EntityID(*target\particles(i)\entity_handle),-90,#PB_World)
          ;RotateEntity(*target\particles(i)\entity_handle,0,0,270,#PB_Relative)
      EndSelect
      
      
      Dim temp_orientation.d(2,0)
      Dim rot_inv.d(2,2)
      
      matrix_inv(*target\particles(i)\rotation(),rot_inv())
      matrix_multi(rot_inv(),orientation(),temp_orientation(),0,0)
      If temp_orientation(0,0)<0:temp_orientation(0,0)+360:EndIf
      If temp_orientation(1,0)<0:temp_orientation(1,0)+360:EndIf
      If temp_orientation(2,0)<0:temp_orientation(2,0)+360:EndIf
      
      RotateEntity(*target\particles(i)\entity_handle,temp_orientation(0,0),temp_orientation(1,0),temp_orientation(2,0),#PB_Relative)
      
      
      matrix_multi(rot_matrix(),*target\particles(i)\rotation(),temp_matrix(),0,0)
      
      CopyArray(temp_matrix(),*target\particles(i)\rotation())
      tempquat.quat
      quat_mul(@rot,@*target\particles(i)\rot,@tempquat)
      *target\particles(i)\rot\w=tempquat\w
      *target\particles(i)\rot\x=tempquat\x
      *target\particles(i)\rot\y=tempquat\y
      *target\particles(i)\rot\z=tempquat\z
      
      
      ;       If *target\particles(i)\rotation(0,0)=0 And *target\particles(i)\rotation(0,1)=0 And *target\particles(i)\rotation(0,2)=0 And *target\particles(i)\rotation(1,0)=0 And *target\particles(i)\rotation(1,1)=0 And *target\particles(i)\rotation(1,2)=0 And *target\particles(i)\rotation(2,0)=0 And *target\particles(i)\rotation(2,1)=0 And *target\particles(i)\rotation(2,2)=0
      ;         CallDebugger
      ;         EndIf
      ;         
    Next i
    
    
  EndIf  
  
EndProcedure  

Procedure move_cluster(*target.cluster)
  
  ;   rx=2*Random(1)-1   ;causes checkerboarding
  ;   ry=2*Random(1)-1
  ;   rz=2*Random(1)-1
  ;   
  
  rx=Random(2)-1   
  ry=Random(2)-1
  rz=Random(2)-1
  If *target\nr_particles=1:*target\freepath+dx:EndIf ;Sqr(rx*rx+ry*ry+rz*rz)*
  ;   temp.cluster
  ;   CopyStructure(*target,@temp,cluster)
  For i=0 To ArraySize(*target\particles())
    For j=0 To ArraySize(*target\particles(i)\points())
      *target\particles(i)\points(j)\x+rx
      *target\particles(i)\points(j)\y+ry
      *target\particles(i)\points(j)\z+rz
    Next   
  Next   
  
;   If periodic_x
;     For i=0 To ArraySize(*target\particles())
;     For j=0 To ArraySize(*target\particles(i)\points())
;       If *target\particles(i)\points(j)\x<0
;         *target\particles(i)\points(j)\x+nx
;        EndIf
;        If  *target\particles(i)\points(j)\x>nx
;         *target\particles(i)\points(j)\x-nx
;        EndIf
;     Next   
;   Next 
;   EndIf
    
  ;   ForEach *target\particles()
  ;     ForEach *target\particles()\points()
  ;       If *target\particles()\points()\x>nx:reset=1:EndIf
  ;       If *target\particles()\points()\y>ny:reset=1:EndIf
  ;       If *target\particles()\points()\z>nz:reset=1:EndIf
  ;       If *target\particles()\points()\x<0:reset=1:EndIf
  ;       If *target\particles()\points()\y<0:reset=1:EndIf
  ;       If *target\particles()\points()\z<0:reset=1:EndIf      
  ;     Next   
  ;   Next 
  ;   
  ;   If reset=1
  ;     CopyStructure(@temp,*target,cluster)
  ;   Else  
  *target\maxx+rx
  *target\minx+rx
  *target\maxy+ry
  *target\miny+ry
  *target\maxz+rz
  *target\minz+rz
  
  For i=0 To ArraySize(*target\particles())
    *target\particles(i)\maxx+rx
    *target\particles(i)\minx+rx
    *target\particles(i)\maxy+ry
    *target\particles(i)\miny+ry
    *target\particles(i)\maxz+rz
    *target\particles(i)\minz+rz
  Next 
  
  If check_collision(*target)
    
     If *target\nr_particles=1:*target\freepath-dx:EndIf ;Sqr(rx*rx+ry*ry+rz*rz)*
    For i=0 To ArraySize(*target\particles())
      For j=0 To ArraySize(*target\particles(i)\points())
        *target\particles(i)\points(j)\x-rx
        *target\particles(i)\points(j)\y-ry
        *target\particles(i)\points(j)\z-rz
      Next   
    Next   
    
    ;   ForEach *target\particles()
    ;     ForEach *target\particles()\points()
    ;       If *target\particles()\points()\x>nx:reset=1:EndIf
    ;       If *target\particles()\points()\y>ny:reset=1:EndIf
    ;       If *target\particles()\points()\z>nz:reset=1:EndIf
    ;       If *target\particles()\points()\x<0:reset=1:EndIf
    ;       If *target\particles()\points()\y<0:reset=1:EndIf
    ;       If *target\particles()\points()\z<0:reset=1:EndIf      
    ;     Next   
    ;   Next 
    ;   
    ;   If reset=1
    ;     CopyStructure(@temp,*target,cluster)
    ;   Else  
    *target\maxx-rx
    *target\minx-rx
    *target\maxy-ry
    *target\miny-ry
    *target\maxz-rz
    *target\minz-rz
    
    For i=0 To ArraySize(*target\particles())
      *target\particles(i)\maxx-rx
      *target\particles(i)\minx-rx
      *target\particles(i)\maxy-ry
      *target\particles(i)\miny-ry
      *target\particles(i)\maxz-rz
      *target\particles(i)\minz-rz
    Next 
    
;     If periodic_x
;           For i=0 To ArraySize(*target\particles())
;     For j=0 To ArraySize(*target\particles(i)\points())
;       If *target\particles(i)\points(j)\x<0
;         *target\particles(i)\points(j)\x+nx
;        EndIf
;        If  *target\particles(i)\points(j)\x>nx
;         *target\particles(i)\points(j)\x-nx
;        EndIf
;     Next   
;   Next 
;     EndIf  
    
  Else   
    
    For i=0 To *target\nr_particles-1 
      
      MoveEntity(*target\particles(i)\entity_handle,rx,ry,rz)
      
    Next i
    
    
  EndIf  
  
  ;   EndIf  
EndProcedure  

Procedure sediment_cluster(*target.cluster)
  
  ;   temp.cluster
  ;   CopyStructure(*target,@temp,cluster)
  For i=0 To ArraySize(*target\particles())
    For j=0 To ArraySize(*target\particles(i)\points())
      *target\particles(i)\points(j)\y-1
    Next   
  Next   
  
  ;   ForEach *target\particles()
  ;     ForEach *target\particles()\points()
  ;       If *target\particles()\points()\x>nx:reset=1:EndIf
  ;       If *target\particles()\points()\y>ny:reset=1:EndIf
  ;       If *target\particles()\points()\z>nz:reset=1:EndIf
  ;       If *target\particles()\points()\x<0:reset=1:EndIf
  ;       If *target\particles()\points()\y<0:reset=1:EndIf
  ;       If *target\particles()\points()\z<0:reset=1:EndIf      
  ;     Next   
  ;   Next 
  ;   
  ;   If reset=1
  ;     CopyStructure(@temp,*target,cluster)
  ;   Else  
  
  *target\maxy-1
  *target\miny-1
  
  
  For i=0 To ArraySize(*target\particles())
    
    *target\particles(i)\maxy-1
    *target\particles(i)\miny-1
    
  Next 
  
  If check_collision(*target)
    
    For i=0 To ArraySize(*target\particles())
      For j=0 To ArraySize(*target\particles(i)\points())
        *target\particles(i)\points(j)\y+1
      Next   
    Next   
    
    ;   ForEach *target\particles()
    ;     ForEach *target\particles()\points()
    ;       If *target\particles()\points()\x>nx:reset=1:EndIf
    ;       If *target\particles()\points()\y>ny:reset=1:EndIf
    ;       If *target\particles()\points()\z>nz:reset=1:EndIf
    ;       If *target\particles()\points()\x<0:reset=1:EndIf
    ;       If *target\particles()\points()\y<0:reset=1:EndIf
    ;       If *target\particles()\points()\z<0:reset=1:EndIf      
    ;     Next   
    ;   Next 
    ;   
    ;   If reset=1
    ;     CopyStructure(@temp,*target,cluster)
    ;   Else  
    
    *target\maxy+1
    *target\miny+1
    
    
    For i=0 To ArraySize(*target\particles())
      
      *target\particles(i)\maxy+1
      *target\particles(i)\miny+1
      
    Next 
    
  Else
    
    For i=0 To *target\nr_particles-1 
      
      MoveEntity(*target\particles(i)\entity_handle,0,-1,0)
      
    Next i
    
  EndIf  
  
  ;   EndIf  
EndProcedure 

Procedure calc_gyration(*target.cluster)
  
    Dim centers.d(2)
    count.i
       
    For i=0 To ArraySize(*target\particles())
      For j=0 To ArraySize(*target\particles(i)\points())
        count+1
        centers(0)+*target\particles(i)\points(j)\x
        centers(1)+*target\particles(i)\points(j)\y
        centers(2)+*target\particles(i)\points(j)\z
      Next   
    Next 
    centers(0)/count
    centers(1)/count
    centers(2)/count
    
    temp.d=0
    For i=0 To ArraySize(*target\particles())
      For j=0 To ArraySize(*target\particles(i)\points())
        temp+Pow(*target\particles(i)\points(j)\x-centers(0),2)
        temp+Pow(*target\particles(i)\points(j)\y-centers(1),2)
        temp+Pow(*target\particles(i)\points(j)\z-centers(2),2)
      Next   
    Next
    
    *target\gyration=Sqr(temp/count)*dx

EndProcedure

Procedure calc_fractal_dim(*target.cluster)
   
    Dim fractal.xyd(0)
    count=-1
    size.i=*target\diameter/dx/2
    While size>1 And it_depth<6   ;box counting
      it_depth+1
      
      count+1
      ReDim fractal.xyd(count)
      fractal(count)\x=size
      boxes=Round(*target\diameter/dx/size,#PB_Round_Up)
      
      particlesize=SizeOf(particle)
      pointsize=SizeOf(coordinates)
      res.i
     
      !xor rbx,rbx
      !mov rax,[p.p_target]    
      !mov r8,[p.v_boxes]  
      !mov r11,[rax+16]
      !.xloop:
      !mov r9,[p.v_boxes]
      !mov r12,[rax+32]
      !.yloop:
      !mov r10,[p.v_boxes]
      !mov r13,[rax+48]
      !.zloop:
      !mov rdx,[rax]
      !mov rcx,[rax+56]
      !.particleloop:
      !mov rsi,[rdx]
      !mov rdi,[rdx+56]
      !.pointloop:
      !mov r14,[rsi]
      !cmp r14,r11
      !jl .outpoint 
      !sub r14,[p.v_size]
      !cmp r14,r11
      !jge .outpoint
      !mov r14,[rsi+8]
      !cmp r14,r12
      !jl .outpoint 
      !sub r14,[p.v_size]
      !cmp r14,r12
      !jge .outpoint
      !mov r14,[rsi+16]
      !cmp r14,r13
      !jl .outpoint 
      !sub r14,[p.v_size]
      !cmp r14,r13
      !jge .outpoint
      !add rbx,1
      !jmp .outbox
      !.outpoint:
      !add rsi,[p.v_pointsize]
      !sub rdi,1
      !jnz .pointloop    
      !add rdx,[p.v_particlesize]
      !sub rcx,1
      !jnz .particleloop
      !.outbox:
      !add r13,[p.v_size]
      !sub r10,1
      !jnz .zloop    
      !add r12,[p.v_size]
      !sub r9,1
      !jnz .yloop    
      !add r11,[p.v_size]
      !sub r8,1
      !jnz .xloop
      !mov qword [p.v_res],rbx
      
      fractal(count)\y=res
      
      If Round(0.7*size,#PB_Round_Up)<size
        size=Round(0.7*size,#PB_Round_Up) 
      Else
        size-1
      EndIf  
    Wend ;0.05*clusters(a)\diameter/dx
    If size<=1
      *target\fractal_dim=3
      
    Else  
      ;   Debug res
      ;   Debug test
      ;   CallDebugger
      
      ;Debug "start"
      For i=0 To count
        fractal(i)\x=Log10(fractal(i)\x)
        ; Debug fractal(i)\x
      Next i
      ;Debug "----"
      For i=0 To count
        fractal(i)\y=Log10(fractal(i)\y)
        ; Debug fractal(i)\y
      Next i
      
      
      delta.d=1.0001  ;levenberg marquardt fit
      lambda.d=0.001   
      ssr.d
      iterationstiefe=0
      Dim parameters.d(1)
      parameters(0)=fractal(count)\y
      parameters(1)=-3
      Repeat
        iterationstiefe+1
        Dim ableitungen.d(2,count)
        Dim ergebnisvektor.d(1,0)
        Dim J.d(count,1)
        Dim J_invers.d(1,count)
        Dim Q_vektor.d(count,0)
        Dim JTJ.d(1,1)
        Dim JTJ_invers.d(1,1)
        For i=0 To count
          ableitungen(2,i)=parameters(0)+parameters(1)*fractal(i)\x;Pow(fractal(i)\x,parameters(1))
        Next i       
        ssr=0
        For i=0 To count
          ssr+Pow(ableitungen(2,i)-fractal(i)\y,2)
        Next i  
        
        For i=0 To count
          ableitungen(0,i)=parameters(0)*delta+fractal(i)\x*parameters(1);*Pow(fractal(i)\x,parameters(1))
          ableitungen(1,i)=parameters(0)+delta*fractal(i)\x*parameters(1);*Pow(fractal(i)\x,parameters(1)*delta)
        Next i 
        
        For i=0 To count
          J(i,0)=(ableitungen(0,i)-ableitungen(2,i))/(((delta-1)*parameters(0)))
          J(i,1)=(ableitungen(1,i)-ableitungen(2,i))/(((delta-1)*parameters(1)))
          Q_vektor(i,0)=fractal(i)\y-ableitungen(2,i)
        Next i 
        
        matrix_multi(J(),J(),JTJ(),1,0)
        
        For i=0 To 1
          JTJ(i,i)+lambda
        Next i
        
        matrix_inv(JTJ(),JTJ_invers())
        matrix_multi(JTJ_invers(),J(),J_invers(),0,1)
        matrix_multi(J_invers(),Q_vektor(),ergebnisvektor(),0,0)
        parameters(0)+ergebnisvektor(0,0)
        parameters(1)+ergebnisvektor(1,0) 
        temp=ssr
        ssr=0
        For i=0 To count
          ableitungen(2,i)=parameters(0)+fractal(i)\x*parameters(1);Pow(fractal(i)\x,parameters(1))
          ssr+Pow(ableitungen(2,i)-fractal(i)\y,2)
        Next i
        If Not ssr<temp
          parameters(0)-ergebnisvektor(0,0)
          parameters(1)-ergebnisvektor(1,0)       
          lambda*100
          ok=0
        Else
          lambda/10
          ok=1
        EndIf  
      Until iterationstiefe=100 Or (temp/ssr<1.00000001 And ok) Or lambda>Pow(10,15)
      If Not IsNAN(parameters(1)):*target\fractal_dim=-parameters(1):EndIf
      If *target\fractal_dim<=1.2:*target\fractal_dim=1.2:EndIf   ;fractal dimension might be 1 for goethite rods and thus, hydrodynamic radius diverges
      
    EndIf
  
EndProcedure  

Procedure.i merge_clusters(cluster_a.i,cluster_b.i,particle_a.i,particle_b.i)
  
  temp.d
  count.i
            
  If clusters(cluster_b)\maxx>clusters(cluster_a)\maxx:clusters(cluster_a)\maxx=clusters(cluster_b)\maxx:EndIf
  If clusters(cluster_b)\maxy>clusters(cluster_a)\maxy:clusters(cluster_a)\maxy=clusters(cluster_b)\maxy:EndIf
  If clusters(cluster_b)\maxz>clusters(cluster_a)\maxz:clusters(cluster_a)\maxz=clusters(cluster_b)\maxz:EndIf
  If clusters(cluster_b)\minx<clusters(cluster_a)\minx:clusters(cluster_a)\minx=clusters(cluster_b)\minx:EndIf
  If clusters(cluster_b)\miny<clusters(cluster_a)\miny:clusters(cluster_a)\miny=clusters(cluster_b)\miny:EndIf
  If clusters(cluster_b)\minz<clusters(cluster_a)\minz:clusters(cluster_a)\minz=clusters(cluster_b)\minz:EndIf
  max=clusters(cluster_a)\maxx-clusters(cluster_a)\minx
  If clusters(cluster_a)\maxy-clusters(cluster_a)\miny>max:max=clusters(cluster_a)\maxy-clusters(cluster_a)\miny:EndIf
  If clusters(cluster_a)\maxz-clusters(cluster_a)\minz>max:max=clusters(cluster_a)\maxz-clusters(cluster_a)\minz:EndIf
  clusters(cluster_a)\diameter=dx*(max+1)
  clusters(cluster_a)\mass+clusters(cluster_b)\mass
 ; list_attach.i=ListSize(clusters(cluster_a)\particles(particle_a)\attached_to())+1
  AddElement(clusters(cluster_a)\particles(particle_a)\attached_to())
 ; clusters(cluster_a)\particles(particle_a)\attached_to()\begin_of_cluster=clusters(cluster_a)\nr_particles
  clusters(cluster_a)\particles(particle_a)\attached_to()=clusters(cluster_a)\nr_particles+particle_b
  For i=0 To ArraySize(clusters(cluster_b)\particles())
    ForEach clusters(cluster_b)\particles(i)\attached_to()
       clusters(cluster_b)\particles(i)\attached_to()+clusters(cluster_a)\nr_particles
      ; clusters(cluster_b)\particles(i)\attached_to()\begin_of_cluster+clusters(cluster_a)\nr_particles
    Next 
  Next i
  a_parts=ArraySize(clusters(cluster_a)\particles())
  clusters(cluster_a)\nr_particles+clusters(cluster_b)\nr_particles
  ReDim clusters(cluster_a)\particles.particle(clusters(cluster_a)\nr_particles-1)
  For i=0 To ArraySize(clusters(cluster_b)\particles())
    a_parts+1    
    CopyStructure(@clusters(cluster_b)\particles(i),@clusters(cluster_a)\particles(a_parts),particle)
  Next i
  
  If cluster_b<nr_clusters
    CopyStructure(@clusters(nr_clusters),@clusters(cluster_b),cluster)
    If nr_clusters=nr_largest_cluster:nr_largest_cluster=cluster_b:EndIf
    For j=0 To ArraySize(clusters(cluster_b)\particles())
      For k=0 To ArraySize(clusters(cluster_b)\particles(j)\points())
        field_info(clusters(cluster_b)\particles(j)\points(k)\x,clusters(cluster_b)\particles(j)\points(k)\y,clusters(cluster_b)\particles(j)\points(k)\z)\cluster=cluster_b+1
      Next k  
    Next j
    ;MoveMemory(@clusters(b+1),@clusters(b),SizeOf(cluster)*(ArraySize(clusters())-b))
  EndIf
  If cluster_a=nr_clusters:cluster_a=cluster_b:EndIf
  nr_clusters-1
  
  ReDim clusters.cluster(nr_clusters)
  
  If calculate_gyration And Not (cluster_a=0 And Not mode=2)
    calc_gyration(@clusters(cluster_a))
  EndIf
  
  If calculate_fractals And Not (cluster_a=0 And Not mode=2)
;     
;     Debug clusters(a)\nr_particles
;     Debug ArraySize(clusters(a)\particles())+1
    calc_fractal_dim(@clusters(cluster_a))    
  EndIf
  
  If calculate_fractals And calculate_gyration And Not (cluster_a=0 And Not mode=2)
  
    clusters(cluster_a)\hydrodyn=2*clusters(cluster_a)\gyration*(1-1/clusters(cluster_a)\fractal_dim)*Sqr(2/clusters(cluster_a)\fractal_dim+1)
    clusters(cluster_a)\diff=k_boltz*temperature/(6*#PI*0.001*clusters(cluster_a)\hydrodyn)
        
  EndIf  
  
  If clusters(cluster_a)\mass>largest_cluster
    largest_cluster=clusters(cluster_a)\mass
    nr_largest_cluster=cluster_a  
  EndIf  

EndProcedure  

Procedure detach(detaching_cluster.i,detaching_particle.i)
 
  nr_clusters+1
  ReDim clusters.cluster(nr_clusters)
  old_parts=clusters(detaching_cluster)\nr_particles-1
  Dim detachers.i(old_parts)
  Dim detachers_cum.i(old_parts)
  detachers(detaching_particle)=1
  
  ;find all particles that are going to be detached and store in detachers; 
  ;detachers_cum contains the cumulative offset needed to construct the detached clusters correctly
  Repeat
    found=0
    For i=0 To old_parts
      If detachers(i)=1
      ForEach clusters(detaching_cluster)\particles(i)\attached_to()
        If detachers(clusters(detaching_cluster)\particles(i)\attached_to())=0
          detachers(clusters(detaching_cluster)\particles(i)\attached_to())=1
          found=1
        EndIf  
        Next  

      EndIf
    Next i 
    
    For i=0 To old_parts
      ForEach clusters(detaching_cluster)\particles(i)\attached_to()
        If detachers(clusters(detaching_cluster)\particles(i)\attached_to()) And Not detachers(i)=1
          detachers(i)=1
          found=1
        EndIf  
      Next   
    Next i  
  Until Not found  
  
  If detaching_cluster=0 And Not mode=2 And detachers(0)=1
    ;it might happen that upon dtaching the wrong numbering appears as a beforehand inwards directed attachemt attahces to the wall. On detachment the wall will be released....
    For i=0 To old_parts
      If detachers(i):detachers(i)=0:Else:detachers(i)=1:EndIf
    Next   
  EndIf 
  
  detachers_cum(0)=detachers(0)
  For i=1 To old_parts
    detachers_cum(i)=detachers_cum(i-1)+detachers(i)
  Next i  
  
 
  
  Dim clusters(nr_clusters)\particles.particle(detachers_cum(old_parts)-1)
    
;set attachemtn pointer to new cluster strcuture
  For i=0 To old_parts
    ForEach clusters(detaching_cluster)\particles(i)\attached_to()
      If detachers(clusters(detaching_cluster)\particles(i)\attached_to())
         clusters(detaching_cluster)\particles(i)\attached_to()=detachers_cum(clusters(detaching_cluster)\particles(i)\attached_to())-1
      Else        
         clusters(detaching_cluster)\particles(i)\attached_to()-detachers_cum(clusters(detaching_cluster)\particles(i)\attached_to())
      EndIf  
     Next  
  Next i
   
  ;remove detached part fom the cluster
  count=-1
  For i=0 To old_parts
    If detachers(i)
      count+1
      CopyStructure(@clusters(detaching_cluster)\particles(i),@clusters(nr_clusters)\particles(count),particle)   
    Else  
      If count>=0
        CopyStructure(@clusters(detaching_cluster)\particles(i),@clusters(detaching_cluster)\particles(i-detachers_cum(i)),particle)  
      EndIf  
    EndIf    
  Next i
  ReDim clusters(detaching_cluster)\particles.particle(old_parts-detachers_cum(old_parts))

  clusters(detaching_cluster)\maxx=-1
  clusters(detaching_cluster)\maxy=-1
  clusters(detaching_cluster)\maxz=-1
  clusters(nr_clusters)\maxx=-1
  clusters(nr_clusters)\maxy=-1
  clusters(nr_clusters)\maxz=-1
  clusters(detaching_cluster)\minx=nx+1
  clusters(detaching_cluster)\miny=ny+1
  clusters(detaching_cluster)\minz=nz+1
  clusters(nr_clusters)\minx=nx+1
  clusters(nr_clusters)\miny=ny+1
  clusters(nr_clusters)\minz=nz+1
  
  For i=0 To ArraySize(clusters(detaching_cluster)\particles())
    If clusters(detaching_cluster)\particles(i)\maxx>clusters(detaching_cluster)\maxx:clusters(detaching_cluster)\maxx=clusters(detaching_cluster)\particles(i)\maxx:EndIf
    If clusters(detaching_cluster)\particles(i)\maxy>clusters(detaching_cluster)\maxy:clusters(detaching_cluster)\maxy=clusters(detaching_cluster)\particles(i)\maxy:EndIf
    If clusters(detaching_cluster)\particles(i)\maxz>clusters(detaching_cluster)\maxz:clusters(detaching_cluster)\maxz=clusters(detaching_cluster)\particles(i)\maxz:EndIf
    If clusters(detaching_cluster)\particles(i)\minx<clusters(detaching_cluster)\minx:clusters(detaching_cluster)\minx=clusters(detaching_cluster)\particles(i)\minx:EndIf
    If clusters(detaching_cluster)\particles(i)\miny<clusters(detaching_cluster)\miny:clusters(detaching_cluster)\miny=clusters(detaching_cluster)\particles(i)\miny:EndIf
    If clusters(detaching_cluster)\particles(i)\minz<clusters(detaching_cluster)\minz:clusters(detaching_cluster)\minz=clusters(detaching_cluster)\particles(i)\minz:EndIf
  Next i  
  
  max=clusters(detaching_cluster)\maxx-clusters(detaching_cluster)\minx
  If clusters(detaching_cluster)\maxy-clusters(detaching_cluster)\miny>max:max=clusters(detaching_cluster)\maxy-clusters(detaching_cluster)\miny:EndIf
  If clusters(detaching_cluster)\maxz-clusters(detaching_cluster)\minz>max:max=clusters(detaching_cluster)\maxz-clusters(detaching_cluster)\minz:EndIf
  clusters(detaching_cluster)\diameter=dx*(max+1)
  clusters(detaching_cluster)\mass=0
  For i=0 To ArraySize(clusters(detaching_cluster)\particles())
    clusters(detaching_cluster)\mass+clusters(detaching_cluster)\particles(i)\mass
  Next i   
  clusters(detaching_cluster)\nr_particles=ArraySize(clusters(detaching_cluster)\particles())+1
  
  For i=0 To ArraySize(clusters(nr_clusters)\particles())  
    If clusters(nr_clusters)\particles(i)\maxx>clusters(nr_clusters)\maxx:clusters(nr_clusters)\maxx=clusters(nr_clusters)\particles(i)\maxx:EndIf
    If clusters(nr_clusters)\particles(i)\maxy>clusters(nr_clusters)\maxy:clusters(nr_clusters)\maxy=clusters(nr_clusters)\particles(i)\maxy:EndIf
    If clusters(nr_clusters)\particles(i)\maxz>clusters(nr_clusters)\maxz:clusters(nr_clusters)\maxz=clusters(nr_clusters)\particles(i)\maxz:EndIf
    If clusters(nr_clusters)\particles(i)\minx<clusters(nr_clusters)\minx:clusters(nr_clusters)\minx=clusters(nr_clusters)\particles(i)\minx:EndIf
    If clusters(nr_clusters)\particles(i)\miny<clusters(nr_clusters)\miny:clusters(nr_clusters)\miny=clusters(nr_clusters)\particles(i)\miny:EndIf
    If clusters(nr_clusters)\particles(i)\minz<clusters(nr_clusters)\minz:clusters(nr_clusters)\minz=clusters(nr_clusters)\particles(i)\minz:EndIf
  Next i  
  
  max=clusters(nr_clusters)\maxx-clusters(nr_clusters)\minx
  If clusters(nr_clusters)\maxy-clusters(nr_clusters)\miny>max:max=clusters(nr_clusters)\maxy-clusters(nr_clusters)\miny:EndIf
  If clusters(nr_clusters)\maxz-clusters(nr_clusters)\minz>max:max=clusters(nr_clusters)\maxz-clusters(nr_clusters)\minz:EndIf
  clusters(nr_clusters)\diameter=dx*(max+1)
  clusters(nr_clusters)\mass=0
  For i=0 To ArraySize(clusters(nr_clusters)\particles())
    clusters(nr_clusters)\mass+clusters(nr_clusters)\particles(i)\mass
  Next i   
  clusters(nr_clusters)\nr_particles=ArraySize(clusters(nr_clusters)\particles())+1
  
  If calculate_gyration
    calc_gyration(@clusters(nr_clusters))
    If Not (detach_cluster=0 And Not mode=2):calc_gyration(@clusters(detaching_cluster)):EndIf
  EndIf
 
  If calculate_fractals
 ;   Debug "fromdetach"
    calc_fractal_dim(@clusters(nr_clusters))
    If Not (detach_cluster=0 And Not mode=2):calc_fractal_dim(@clusters(detaching_cluster)):EndIf
  EndIf
  
  If calculate_fractals And calculate_gyration
    If Not (detach_cluster=0 And Not mode=2)
      clusters(detaching_cluster)\hydrodyn=2*clusters(detaching_cluster)\gyration*(1-1/clusters(detaching_cluster)\fractal_dim)*Sqr(2/clusters(detaching_cluster)\fractal_dim+1)
      clusters(detaching_cluster)\diff=k_boltz*temperature/(6*#PI*0.001*clusters(detaching_cluster)\hydrodyn)    
    EndIf
    clusters(nr_clusters)\hydrodyn=2*clusters(nr_clusters)\gyration*(1-1/clusters(nr_clusters)\fractal_dim)*Sqr(2/clusters(nr_clusters)\fractal_dim+1)
    clusters(nr_clusters)\diff=k_boltz*temperature/(6*#PI*0.001*clusters(nr_clusters)\hydrodyn)
        
  EndIf  
  
  largest_cluster=0
  For i=0 To nr_clusters
    If clusters(i)\mass>largest_cluster:largest_cluster=clusters(i)\mass:nr_largest_cluster=i:EndIf
  Next i  
    
EndProcedure  

Procedure check_attachment(*target.cluster,index.i,*result.attach_info) ;inputindex to skip attachment to self, returns attach_info
  
  *p1=@field()
  particlesize=SizeOf(particle)
  pointsize=SizeOf(coordinates)
  ;   countersize=SizeOf(counter)
  ;   If mode=1
  ;     Dim attaches.counter(0)
  ;   Else  
  ;   Dim attaches.counter(nr_clusters)
  ;   EndIf
  ;   *p2=@attaches()     
  ;      is_attach.i
  ;      
  For i=0 To ArraySize(*target\particles())
    For j=0 To ArraySize(*target\particles(i)\points())
      x.i=*target\particles(i)\points(j)\x
      y.i=*target\particles(i)\points(j)\y
      z.i=*target\particles(i)\points(j)\z
      If Not x>=nx  
        If field(x+1,y,z) And Not field_info(x+1,y,z)\cluster=index And Not (mode=1 And Not field_info(x+1,y,z)\cluster=1)
          If random_cont(1,18)<chances(*target\particles(i)\id,field(x+1,y,z))
            attach_minerals(*target\particles(i)\id,field(x+1,y,z))+1
            *result\attached_to_cluster=field_info(x+1,y,z)\cluster
            *result\attached_to_particle=field_info(x+1,y,z)\particle-1
            *result\attaching_part=i
            ProcedureReturn 
          EndIf  
        EndIf
      EndIf
      If Not x<=0
        If field(x-1,y,z) And Not field_info(x-1,y,z)\cluster=index And Not (mode=1 And Not field_info(x-1,y,z)\cluster=1)
          If random_cont(1,18)<chances(*target\particles(i)\id,field(x-1,y,z))
            attach_minerals(*target\particles(i)\id,field(x-1,y,z))+1
            *result\attached_to_cluster=field_info(x-1,y,z)\cluster
            *result\attached_to_particle=field_info(x-1,y,z)\particle-1
            *result\attaching_part=i
            ProcedureReturn 
          EndIf  
        EndIf
      EndIf
      If Not y>=ny
        If field(x,y+1,z) And Not field_info(x,y+1,z)\cluster=index And Not (mode=1 And Not field_info(x,y+1,z)\cluster=1)
          If random_cont(1,18)<chances(*target\particles(i)\id,field(x,y+1,z))
            attach_minerals(*target\particles(i)\id,field(x,y+1,z))+1
            *result\attached_to_cluster=field_info(x,y+1,z)\cluster
            *result\attached_to_particle=field_info(x,y+1,z)\particle-1
            *result\attaching_part=i
            ProcedureReturn 
          EndIf  
        EndIf
      EndIf
      If Not y<=0
        If field(x,y-1,z) And Not field_info(x,y-1,z)\cluster=index And Not (mode=1 And Not field_info(x,y-1,z)\cluster=1)
          If random_cont(1,18)<chances(*target\particles(i)\id,field(x,y-1,z))
            attach_minerals(*target\particles(i)\id,field(x,y-1,z))+1
            *result\attached_to_cluster=field_info(x,y-1,z)\cluster
            *result\attached_to_particle=field_info(x,y-1,z)\particle-1
            *result\attaching_part=i
            ProcedureReturn 
          EndIf  
        EndIf
      EndIf
      If Not z>=nz
        If field(x,y,z+1) And Not field_info(x,y,z+1)\cluster=index And Not (mode=1 And Not field_info(x,y,z+1)\cluster=1)
          If random_cont(1,18)<chances(*target\particles(i)\id,field(x,y,z+1))
            attach_minerals(*target\particles(i)\id,field(x,y,z+1))+1
            *result\attached_to_cluster=field_info(x,y,z+1)\cluster
            *result\attached_to_particle=field_info(x,y,z+1)\particle-1
            *result\attaching_part=i
            ProcedureReturn 
          EndIf  
        EndIf
      EndIf
      If Not z<=0
        If field(x,y,z-1) And Not field_info(x,y,z-1)\cluster=index And Not (mode=1 And Not field_info(x,y,z-1)\cluster=1)
          If random_cont(1,18)<chances(*target\particles(i)\id,field(x,y,z-1))
            attach_minerals(*target\particles(i)\id,field(x,y,z-1))+1
            *result\attached_to_cluster=field_info(x,y,z-1)\cluster
            *result\attached_to_particle=field_info(x,y,z-1)\particle-1
            *result\attaching_part=i
            ProcedureReturn 
          EndIf  
        EndIf
      EndIf
    Next j
  Next i  
  
  *result\attached_to_cluster=0
  *result\attached_to_particle=0
  *result\attaching_part=0
   
EndProcedure  

Procedure set_mineral_shapes()
  
  ;   ClearList(plate())
  ;   ClearList(rod())
  ;   ClearList(sphere())
  count=-1
  For i=0 To plate_length:For j=0 To plate_width:For k=0 To plate_thickness
        count+1
        ReDim plate\points.coordinates(count)        
        plate\points(count)\x=i
        plate\points(count)\y=j
        plate\points(count)\z=k
  Next k:Next j:Next i
  plate\maxx=plate_length
  plate\maxy=plate_width
  plate\maxz=plate_thickness
  
  max=0
  If plate_length>max:max=plate_length:EndIf
  If plate_width>max:max=plate_width:EndIf
  If plate_thickness>max:max=plate_thickness:EndIf
  plate\diameter=dx*(max+1)
  
  count=-1
  For j=0 To rod_diameter:For k=0 To rod_diameter
      a=j-(rod_diameter+1)/2
      b=k-(rod_diameter+1)/2
      If Sqr(a*a+b*b)<=(rod_diameter+1)/2
        For i=0 To rod_length
          count+1
          ReDim rod\points.coordinates(count)
          rod\points(count)\x=i
          rod\points(count)\y=j
          rod\points(count)\z=k
        Next i
      EndIf
  Next k:Next j
  rod\maxx=rod_length
  rod\maxy=rod_diameter
  rod\maxz=rod_diameter
  
  max=0
  If rod_length>max:max=rod_length:EndIf
  If rod_diameter>max:max=rod_diameter:EndIf
  rod\diameter=dx*(max+1)
  
  count=-1
  For i=0 To sphere_diameter:For j=0 To sphere_diameter:For k=0 To sphere_diameter
        a=i-(sphere_diameter+1)/2
        b=j-(sphere_diameter+1)/2
        c=k-(sphere_diameter+1)/2
        If Sqr(a*a+b*b+c*c)<=(sphere_diameter+1)/2; And Sqr(a*a+b*b+c*c)>=qz_size-2        
          count+1
          ReDim sphere\points.coordinates(count)
          sphere\points(count)\x=i
          sphere\points(count)\y=j
          sphere\points(count)\z=k
        EndIf
  Next k:Next j:Next i
  
  sphere\maxx=sphere_diameter
  sphere\maxy=sphere_diameter
  sphere\maxz=sphere_diameter
  
  ; count=-1
  ; For i=0 To sphere_diameter:For j=0 To sphere_diameter:For k=0 To sphere_diameter
  ;        a=i-(sphere_diameter+1)/2
  ;        b=j-(sphere_diameter+1)/2
  ;        c=k-(sphere_diameter+1)/2
  ;        If Sqr(a*a+b*b+c*c)<=(sphere_diameter+1)/2 And Sqr(a*a+b*b+c*c)>=(sphere_diameter+1)/2-2        
  ;          count+1
  ;          ReDim sphere_reduced\points.coordinates(count)
  ;          sphere_reduced\points(count)\x=i
  ;          sphere_reduced\points(count)\y=j
  ;          sphere_reduced\points(count)\z=k
  ;        EndIf
  ;  Next k:Next j:Next i
  ;  
  ;  sphere_reduced\maxx=sphere_diameter
  ;  sphere_reduced\maxy=sphere_diameter
  ;  sphere_reduced\maxz=sphere_diameter
  
  ;  max=0
  ; If qz_length>max:max=qz_length:EndIf
  ; If qz_height>max:max=qz_height:EndIf
  ; If qz_width>max:max=qz_width:EndIf
  sphere\diameter=dx*(sphere_diameter+1)
  ;  sphere_reduced\diameter=dx*(sphere_diameter+1)
  
  sphere\mass=ArraySize(sphere\points())+1
  ; sphere_reduced\mass=ArraySize(sphere\points())+1
  rod\mass=ArraySize(rod\points())+1
  plate\mass=ArraySize(plate\points())+1
  sphere\nr_points=ArraySize(sphere\points())+1
  ;  sphere_reduced\nr_points=ArraySize(sphere_reduced\points())+1
  rod\nr_points=ArraySize(rod\points())+1
  plate\nr_points=ArraySize(plate\points())+1
  
;   temp.d=0
;   count=0 
;   For j=0 To ArraySize(sphere\points()) 
;     count+1
;     x.i=sphere\points(j)\x
;     y.i=sphere\points(j)\y
;     z.i=sphere\points(j)\z
;     For l=0 To ArraySize(sphere\points())    
;       temp+Pow(sphere\points(l)\x-x,2)
;       temp+Pow(sphere\points(l)\y-y,2)
;       temp+Pow(sphere\points(l)\z-z,2)
;     Next l  
;   Next j
;   sphere_gyration=Sqr(temp/(2*Pow(count,2)))*dx
  
  sphere_gyration=(sphere_diameter+1)*dx/2*Sqr(3/5)
  
;   If sphere_gyration=0:sphere_gyration=dx/2:EndIf
  
  temp.d=0
  count=0 
;   For j=0 To ArraySize(rod\points()) 
;     count+1
;     x.i=rod\points(j)\x
;     y.i=rod\points(j)\y
;     z.i=rod\points(j)\z
;     For l=0 To ArraySize(rod\points())    
;       temp+Pow(rod\points(l)\x-x,2)
;       temp+Pow(rod\points(l)\y-y,2)
;       temp+Pow(rod\points(l)\z-z,2)
;     Next l  
;   Next j
;   rod_gyration=Sqr(temp/(2*Pow(count,2)))*dx    
;   If rod_gyration=0:rod_gyration=dx/2:EndIf


   Dim centers.d(2)
      For j=0 To ArraySize(rod\points()) 
        count+1
        centers(0)+rod\points(j)\x
        centers(1)+rod\points(j)\y
        centers(2)+rod\points(j)\z
      Next   
   
    centers(0)/count
    centers(1)/count
    centers(2)/count
    
    temp=0

      For j=0 To ArraySize(rod\points()) 
        temp+Pow(rod\points(j)\x-centers(0),2)
        temp+Pow(rod\points(j)\y-centers(1),2)
        temp+Pow(rod\points(j)\z-centers(2),2)
      Next   
   
    
    rod_gyration=Sqr(temp/count)*dx

  
  temp.d=0
  count=0 
;   For j=0 To ArraySize(plate\points()) 
;     count+1
;     x.i=plate\points(j)\x
;     y.i=plate\points(j)\y
;     z.i=plate\points(j)\z
;     For l=0 To ArraySize(plate\points())    
;       temp+Pow(plate\points(l)\x-x,2)
;       temp+Pow(plate\points(l)\y-y,2)
;       temp+Pow(plate\points(l)\z-z,2)
;     Next l  
;   Next j
;   plate_gyration=Sqr(temp/(2*Pow(count,2)))*dx
;   If plate_gyration=0:plate_gyration=dx/2:EndIf


  
     Dim centers.d(2)
      For j=0 To ArraySize(plate\points()) 
        count+1
        centers(0)+plate\points(j)\x
        centers(1)+plate\points(j)\y
        centers(2)+plate\points(j)\z
      Next   
   
    centers(0)/count
    centers(1)/count
    centers(2)/count
    
    For j=0 To ArraySize(plate\points()) 
        temp+Pow(plate\points(j)\x-centers(0),2)
        temp+Pow(plate\points(j)\y-centers(1),2)
        temp+Pow(plate\points(j)\z-centers(2),2)
      Next   
      plate_gyration=Sqr(temp/count)*dx
   
EndProcedure  

Procedure init_field()
  
  FreeArray(field())
  Global Dim field.b(nx,ny,nz)
  
  FreeArray(field_info())
  Global Dim field_info.field_information(nx,ny,nz)
  
  ReDim profiles.i(3,ny)
  
  nr_clusters=-1
  If mode=1 Or mode=3     ;DLA mode
    clusters(0)\diff=0
    nr_clusters+1
    Select mode_dla
      Case 1
        clusters(0)\particles(0)\points(0)\x=nx/2
        clusters(0)\particles(0)\points(0)\y=ny/2 
        clusters(0)\particles(0)\points(0)\z=nz/2 
        clusters(0)\particles(0)\minx=nx/2
        clusters(0)\particles(0)\maxx=nx/2
        clusters(0)\particles(0)\miny=ny/2
        clusters(0)\particles(0)\maxy=ny/2
        clusters(0)\particles(0)\minz=nz/2
        clusters(0)\particles(0)\maxz=nz/2
        clusters(0)\nr_particles=1
        clusters(0)\particles(0)\nr_points=1
        clusters(0)\particles(0)\mass=1
        clusters(0)\diameter=dx
        clusters(0)\particles(0)\id=1
        clusters(0)\fractal_dim=3
        clusters(0)\mass=1
        clusters(0)\minx=nx/2
        clusters(0)\maxx=nx/2
        clusters(0)\miny=ny/2
        clusters(0)\maxy=ny/2
        clusters(0)\minz=nz/2
        clusters(0)\maxz=nz/2
        field(nx/2,ny/2,nz/2)=1
        field_info(nx/2,ny/2,nz/2)\cluster=1
        field_info(nx/2,ny/2,nz/2)\particle=1
      Case 2
        clusters(0)\particles(0)\nr_points=(nz+1)*(ny+1)
        ReDim clusters(0)\particles(0)\points.coordinates((nz+1)*(ny+1)-1)
        For k=0 To nz:For j=0 To ny
            
            clusters(0)\particles(0)\points(k+nz*j)\x=0
            clusters(0)\particles(0)\points(k+nz*j)\y=j 
            clusters(0)\particles(0)\points(k+nz*j)\z=k 
            field(0,j,k)=1
            field_info(0,j,k)\cluster=1
            field_info(0,j,k)\particle=1
        Next j:Next k
        clusters(0)\particles(0)\minx=0
        clusters(0)\particles(0)\maxx=0
        clusters(0)\particles(0)\miny=0
        clusters(0)\particles(0)\maxy=ny
        clusters(0)\particles(0)\minz=0
        clusters(0)\particles(0)\maxz=nz
        clusters(0)\nr_particles=1
        clusters(0)\diameter=dx*nx
        clusters(0)\particles(0)\id=1
        clusters(0)\particles(0)\mass=(nx+1)*(ny+1)
        clusters(0)\fractal_dim=3
        clusters(0)\mass=(nx+1)*(ny+1)
        clusters(0)\minx=0
        clusters(0)\maxx=0
        clusters(0)\miny=0
        clusters(0)\maxy=ny
        clusters(0)\minz=0
        clusters(0)\maxz=nz
      Case 3
        clusters(0)\particles(0)\nr_points=(nx+1)*(ny+1)*2
        ReDim clusters(0)\particles(0)\points.coordinates(2*(nx+1)*(ny+1)-2)
        For i=0 To nx:For j=0 To ny
            
            clusters(0)\particles(0)\points(i+nx*j)\x=i
            clusters(0)\particles(0)\points(i+nx*j)\y=j 
            clusters(0)\particles(0)\points(i+nx*j)\z=nz 
            field(i,j,nz)=1
            field_info(i,j,nz)\cluster=1
            field_info(i,j,nz)\particle=1
        Next j:Next i
        For j=0 To ny:For k=0 To nz
            
            clusters(0)\particles(0)\points((nx+1)*(ny+1)-1+j+ny*k)\x=0
            clusters(0)\particles(0)\points((nx+1)*(ny+1)-1+j+ny*k)\y=j 
            clusters(0)\particles(0)\points((nx+1)*(ny+1)-1+j+ny*k)\z=k 
            field(0,j,k)=1
            field_info(0,j,k)\cluster=1
            field_info(0,j,k)\particle=1
        Next k:Next j
        clusters(0)\particles(0)\minx=0
        clusters(0)\particles(0)\maxx=nx
        clusters(0)\particles(0)\miny=0
        clusters(0)\particles(0)\maxy=ny
        clusters(0)\particles(0)\minz=0
        clusters(0)\particles(0)\maxz=nz
        clusters(0)\nr_particles=1
        clusters(0)\diameter=dx*nx
        clusters(0)\particles(0)\id=1
        clusters(0)\particles(0)\mass=(nx+1)*(ny+1)*2
        clusters(0)\fractal_dim=3
        clusters(0)\mass=(nx+1)*(ny+1)*2
        clusters(0)\minx=0
        clusters(0)\maxx=nx
        clusters(0)\miny=0
        clusters(0)\maxy=ny
        clusters(0)\minz=n0
        clusters(0)\maxz=nz
      Case 4
        clusters(0)\particles(0)\nr_points=(nx+1)*(ny+1)*3
        ReDim clusters(0)\particles(0)\points.coordinates(3*(nx+1)*(ny+1)-3)
        For i=0 To nx:For j=0 To ny
            
            clusters(0)\particles(0)\points(i+nx*j)\x=i
            clusters(0)\particles(0)\points(i+nx*j)\y=j 
            clusters(0)\particles(0)\points(i+nx*j)\z=nz 
            field(i,j,nz)=1
            field_info(i,j,nz)\cluster=1
            field_info(i,j,nz)\particle=1
        Next j:Next i
        For j=0 To ny:For k=0 To nz
            
            clusters(0)\particles(0)\points((nx+1)*(ny+1)-1+j+ny*k)\x=0
            clusters(0)\particles(0)\points((nx+1)*(ny+1)-1+j+ny*k)\y=j 
            clusters(0)\particles(0)\points((nx+1)*(ny+1)-1+j+ny*k)\z=k 
            field(0,j,k)=1
            field_info(0,j,k)\cluster=1            
            field_info(0,j,k)\particle=1
        Next k:Next j
        
        For i=0 To nx:For k=0 To nz
            
            clusters(0)\particles(0)\points((nx+1)*(ny+1)+(ny+1)*(nz+1)-2+i+ny*k)\x=i
            clusters(0)\particles(0)\points((nx+1)*(ny+1)+(ny+1)*(nz+1)-2+i+ny*k)\y=0 
            clusters(0)\particles(0)\points((nx+1)*(ny+1)+(ny+1)*(nz+1)-2+i+ny*k)\z=k 
            field(i,0,k)=1
            field_info(i,0,k)\cluster=1
            field_info(i,0,k)\particle=1
        Next k:Next i
        
        clusters(0)\particles(0)\minx=0
        clusters(0)\particles(0)\maxx=nx
        clusters(0)\particles(0)\miny=0
        clusters(0)\particles(0)\maxy=ny
        clusters(0)\particles(0)\minz=0
        clusters(0)\particles(0)\maxz=nz
        clusters(0)\nr_particles=1
        clusters(0)\diameter=dx*nx
        clusters(0)\particles(0)\id=1
        clusters(0)\particles(0)\mass=(nx+1)*(ny+1)*3
        clusters(0)\fractal_dim=3
        clusters(0)\mass=(nx+1)*(ny+1)*3
        clusters(0)\minx=0
        clusters(0)\maxx=nx
        clusters(0)\miny=0
        clusters(0)\maxy=ny
        clusters(0)\minz=n0
        clusters(0)\maxz=nz
        
    EndSelect
  EndIf 
  
  temp.cluster
  ;temp1.cluster
  
  Select mode_fraction
    Case 1   
      nr_il=plate_nr
      nr_gt=rod_nr
      nr_qz=sphere_nr
    Case 2
      vol=(nx+1)*(ny+1)*(nz+1)
      nr_qz=sphere_vol*vol/sphere\mass
      nr_gt=rod_vol*vol/rod\mass
      nr_il=plate_vol*vol/plate\mass 
  EndSelect
  
  For i=1 To nr_qz
    ; Dim temp\particles\points.coordinates(size_sphere)
    count=0
    temp\particles(0)\entity_handle=CreateEntity(#PB_Any, MeshID(sphere_m), MaterialID(material_sphere))
    Repeat      
      FreeEntity(temp\particles(0)\entity_handle)
      count+1
      CopyStructure(@sphere,@temp\particles(0),particle)
      temp\particles(0)\entity_handle=CreateEntity(#PB_Any, MeshID(sphere_m), MaterialID(material_sphere))
      temp\diameter=sphere\diameter
      temp\mass=sphere\mass
      temp\nr_particles=1
      temp\maxx=sphere\maxx
      temp\maxy=sphere\maxy
      temp\maxz=sphere\maxz
      temp\minx=sphere\minx
      temp\miny=sphere\miny
      temp\minz=sphere\minz
      randx=Random(nx)
      randy=Random(ny)
      randz=Random(nz)
      For j=0 To ArraySize(temp\particles(0)\points());Each temp\particles()\points()
        temp\particles(0)\points(j)\x+randx
        temp\particles(0)\points(j)\y+randy
        temp\particles(0)\points(j)\z+randz
      Next  
      temp\minx+randx
      temp\maxx+randx
      temp\miny+randy
      temp\maxy+randy
      temp\minz+randz
      temp\maxz+randz
      temp\particles(0)\minx=temp\minx
      temp\particles(0)\maxx=temp\maxx
      temp\particles(0)\miny=temp\miny
      temp\particles(0)\maxy=temp\maxy
      temp\particles(0)\minz=temp\minz
      temp\particles(0)\maxz=temp\maxz
      temp\particles(0)\rotation(0,0)=1
      temp\particles(0)\rotation(1,1)=1
      temp\particles(0)\rotation(2,2)=1
      temp\particles(0)\rot\w=1
            MoveEntity(temp\particles(0)\entity_handle,(temp\maxx+temp\minx)/2,(temp\maxy+temp\miny)/2,(temp\maxz+temp\minz)/2,#PB_Absolute)

      rotate_cluster(@temp,Random(6));Random(6)
      If count=200:MessageRequester("Warning","Could not place particles"+Chr(13)+Chr(10)+"Try to reduce amount"):End:EndIf
    Until Not check_collision(@temp) 
    nr_clusters+1
    temp\gyration=sphere_gyration
    temp\hydrodyn=2*sphere_gyration*(1-1/3)*Sqr(2/3+1)
    temp\diff=k_boltz*temperature/(6*#PI*0.001*temp\hydrodyn)   ;Hess hydrodynmaic behavior of colloids
;     Debug sphere_gyration
;     Debug temp\hydrodyn
;      Debug temp\diff
;      CallDebugger
    ReDim clusters.cluster(nr_clusters) 
    CopyStructure(@temp,@clusters(nr_clusters),cluster)
    clusters(nr_clusters)\fractal_dim=3
    For j=0 To ArraySize(temp\particles(0)\points())
      field(temp\particles(0)\points(j)\x,temp\particles(0)\points(j)\y,temp\particles(0)\points(j)\z)=1
      field_info(temp\particles(0)\points(j)\x,temp\particles(0)\points(j)\y,temp\particles(0)\points(j)\z)\cluster=nr_clusters+1
      field_info(temp\particles(0)\points(j)\x,temp\particles(0)\points(j)\y,temp\particles(0)\points(j)\z)\particle=1
    Next j  
  Next i
  
  For i=1 To nr_gt 
    count=0
    temp\particles(0)\entity_handle=CreateEntity(#PB_Any, MeshID(cylinder_m), MaterialID(material_rod))
    Repeat
      count+1
      FreeEntity(temp\particles(0)\entity_handle)
      CopyStructure(@rod,@temp\particles(),particle)
      temp\particles(0)\entity_handle=CreateEntity(#PB_Any, MeshID(cylinder_m), MaterialID(material_rod))
      temp\diameter=rod\diameter
      temp\mass=rod\mass
      temp\nr_particles=1
      temp\maxx=rod\maxx
      temp\maxy=rod\maxy
      temp\maxz=rod\maxz
      temp\minx=rod\minx
      temp\miny=rod\miny
      temp\minz=rod\minz
      randx=Random(nx)
      randy=Random(ny)
      randz=Random(nz)
      For j=0 To ArraySize(temp\particles(0)\points())
        temp\particles(0)\points(j)\x+randx
        temp\particles(0)\points(j)\y+randy
        temp\particles(0)\points(j)\z+randz
      Next   
      
      temp\minx+randx
      temp\maxx+randx
      temp\miny+randy
      temp\maxy+randy
      temp\minz+randz
      temp\maxz+randz
      temp\particles(0)\minx=temp\minx
      temp\particles(0)\maxx=temp\maxx
      temp\particles(0)\miny=temp\miny
      temp\particles(0)\maxy=temp\maxy
      temp\particles(0)\minz=temp\minz
      temp\particles(0)\maxz=temp\maxz
      temp\particles(0)\rotation(0,1)=-1
      temp\particles(0)\rotation(1,0)=1
      temp\particles(0)\rotation(2,2)=1
      temp\particles(0)\rot\w=Sqr(2)/2
      temp\particles(0)\rot\z=Sqr(2)/2
      MoveEntity(temp\particles(0)\entity_handle,(temp\maxx+temp\minx)/2,(temp\maxy+temp\miny)/2,(temp\maxz+temp\minz)/2,#PB_Absolute)
      RotateEntity(temp\particles(0)\entity_handle,0,0,90,#PB_Absolute)      
      
      rotate_cluster(@temp,Random(6));Random(6)
      
      If count=200:MessageRequester("Warning","Could not place particles"+Chr(13)+Chr(10)+"Try to reduce amount"):End:EndIf
    Until Not check_collision(@temp) 
    nr_clusters+1
    temp\gyration=rod_gyration
    temp\hydrodyn=2*rod_gyration*(1-1/3)*Sqr(2/3+1)
    temp\diff=k_boltz*temperature/(6*#PI*0.001*temp\hydrodyn)
    ReDim clusters.cluster(nr_clusters) 
    CopyStructure(@temp,@clusters(nr_clusters),cluster)
    clusters(nr_clusters)\fractal_dim=3
    For j=0 To ArraySize(temp\particles(0)\points())
      field(temp\particles(0)\points(j)\x,temp\particles(0)\points(j)\y,temp\particles(0)\points(j)\z)=2
      field_info(temp\particles(0)\points(j)\x,temp\particles(0)\points(j)\y,temp\particles(0)\points(j)\z)\cluster=nr_clusters+1
      field_info(temp\particles(0)\points(j)\x,temp\particles(0)\points(j)\y,temp\particles(0)\points(j)\z)\particle=1
    Next j
  Next i 

  For i=1 To nr_il
    count=0
    
    temp\particles(0)\entity_handle=CreateEntity(#PB_Any, MeshID(cube_m), MaterialID(material_plate))
    Repeat
      count+1      
      FreeEntity(temp\particles(0)\entity_handle)
      CopyStructure(@plate,@temp\particles(),particle)     
      temp\particles(0)\entity_handle=CreateEntity(#PB_Any, MeshID(cube_m), MaterialID(material_plate))
      temp\diameter=plate\diameter
      temp\mass=plate\mass
      temp\nr_particles=1
      temp\maxx=plate\maxx
      temp\maxy=plate\maxy
      temp\maxz=plate\maxz
      temp\minx=plate\minx
      temp\miny=plate\miny
      temp\minz=plate\minz
      randx=Random(nx)
      randy=Random(ny)
      randz=Random(nz)
      For j=0 To ArraySize(temp\particles(0)\points())
        temp\particles(0)\points(j)\x+randx
        temp\particles(0)\points(j)\y+randy
        temp\particles(0)\points(j)\z+randz
      Next 
      temp\minx+randx
      temp\maxx+randx
      temp\miny+randy
      temp\maxy+randy
      temp\minz+randz
      temp\maxz+randz
      temp\particles(0)\minx=temp\minx
      temp\particles(0)\maxx=temp\maxx
      temp\particles(0)\miny=temp\miny
      temp\particles(0)\maxy=temp\maxy
      temp\particles(0)\minz=temp\minz
      temp\particles(0)\maxz=temp\maxz
      temp\particles(0)\rotation(0,0)=1
      temp\particles(0)\rotation(1,1)=1
      temp\particles(0)\rotation(2,2)=1
      temp\particles(0)\rot\w=1
      MoveEntity(temp\particles(0)\entity_handle,(temp\maxx+temp\minx)/2,(temp\maxy+temp\miny)/2,(temp\maxz+temp\minz)/2,#PB_Absolute)
      rotate_cluster(@temp,Random(6));Random(6)
      If count=200:MessageRequester("Warning","Could not place particles"+Chr(13)+Chr(10)+"Try to reduce amount"):End:EndIf
    Until Not check_collision(@temp)      
    nr_clusters+1
    temp\gyration=plate_gyration
    temp\hydrodyn=2*plate_gyration*(1-1/3)*Sqr(2/3+1)
    temp\diff=k_boltz*temperature/(6*#PI*0.001*temp\hydrodyn)
    ReDim clusters.cluster(nr_clusters) 
    CopyStructure(@temp,@clusters(nr_clusters),cluster)
    clusters(nr_clusters)\fractal_dim=3
    
    For j=0 To ArraySize(temp\particles(0)\points())
      field(temp\particles(0)\points(j)\x,temp\particles(0)\points(j)\y,temp\particles(0)\points(j)\z)=3
      field_info(temp\particles(0)\points(j)\x,temp\particles(0)\points(j)\y,temp\particles(0)\points(j)\z)\cluster=nr_clusters+1
      field_info(temp\particles(0)\points(j)\x,temp\particles(0)\points(j)\y,temp\particles(0)\points(j)\z)\particle=1
    Next j
  Next i    
  
        For i=0 To nr_clusters
        For j=0 To clusters(i)\nr_particles-1
          total_mass+clusters(i)\particles(j)\nr_points
          Next j
        Next i  
        
  ;profiles        
  For j=0 To ny
    
    spheres=0
    rods=0
    plates=0
    For i=0 To nx
      For k=0 To nz
        Select field(i,j,k)
          Case 1:spheres+1
          Case 2:rods+1
          Case 3:plates+1
        EndSelect
      Next k
    Next i
    profiles(1,j)=spheres
    profiles(2,j)=rods
    profiles(3,j)=plates
    
  Next j  
  
  nr_clusters_init=nr_clusters
  
EndProcedure  

Procedure.d gamma(psi.d)
  temp.d=Exp(e_charge*psi/(2*k_boltz*temperature))
  temp=(temp-1)/(temp+1)
  ProcedureReturn temp
EndProcedure  

Procedure.d kappa(conc.d)
  ;   temp.d
  ;   temp=Sqr(8*)
  ;   temp=(Sqr((e_rel*e_zero*k_boltz*temperature)/(2*avogadro*e_charge*e_charge*conc)))
  ;   temp=temp*Pow(10,9)
  ;   ProcedureReturn 1/temp  
  ;iasraelavchili
  
  ;1000 to derive mol/m³
  temp.d=Sqr(1000*conc*avogadro*2*e_charge*e_charge/(e_rel*e_zero*k_boltz*temperature))

  ;     temp.d
  ;   temp=(Sqr((e_rel*e_zero*k_boltz*temperature)/(2*avogadro*e_charge*e_charge*conc)))
  ;   temp=temp
  ;   ProcedureReturn 1/temp  
  
  ProcedureReturn temp 
  
EndProcedure  

Procedure.d v_born(hamaker.d,distance.d,r1.d)
  
  temp.d
 temp=0 
;temp=hamaker/7560*Pow(sigma,6)*((8*r1+distance)/Pow(2*r1+distance,7)+(6*r1-distance)/Pow(distance,7))
;temp=hamaker*Pow(sigma,6)/(360*#PI*Pow(distance,8))*r1*r1
;Debug temp
  ; temp=distance/(2*r1)+1
  ;temp=Pow(10,-22)/temp*((Pow(temp,2)-14*temp+54)/(Pow(temp-2,7))+(-2*Pow(temp,2)+60)/(Pow(temp,7))+(Pow(temp,2)+14*temp+54)/(Pow(temp-2,7)))
  ;Debug temp
  ProcedureReturn temp
  
EndProcedure  

Procedure.d ve_ss(r1.d,r2.d,psi1.d,psi2.d,conc.d,distance.d)
  temp.d
  kappa.d=kappa(conc) 
  temp=r1*r2/(r1+r2)
   ;1000 to derive mol/m³
  temp=temp*128*#PI*1000*conc*avogadro*k_boltz*temperature/(kappa*kappa)
  temp=temp*gamma(psi1)*gamma(psi2)*Exp(-kappa*distance)
  ;   z.d=Pow(TanH(e_charge*psi1/(4*k_boltz*temperature)),2)*Pow(k_boltz*temperature/e_charge,2)*64*#PI*e_zero*e_rel
  ;   temp=0.5*z*r1*Exp(-kappa*distance)
  ProcedureReturn temp
EndProcedure

Procedure.d va_ss(r1.d,r2.d,hamaker.d,distance.d)
  
  ;elimelech Particle Deposition & Aggregation
  temp.d
  temp=Log((distance*distance+2*r1*distance+2*r2*distance)/(distance*distance+2*r1*distance+2*r2*distance+4*r1*r2))
  temp=temp+2*r1*r2/(distance*distance+2*r1*distance+2*r2*distance)+2*r1*r2/(distance*distance+2*r1*distance+2*r2*distance+4*r1*r2)
  temp=-temp*hamaker/6
;     temp=-hamaker*r1/(12*distance)
  ProcedureReturn temp
  
EndProcedure  

Procedure.d vt_ss(r1.d,r2.d,distance.d,conc.d,psi1.d,psi2.d,ham.d)
  
;     Debug v_born(ham,distance,r1)
;   Debug ve_rp(length,r1,psi1,psi2,distance,conc)
;   Debug va_rp(length,ham,distance,r1)
;   Debug "--"
;  Debug v_born(ham,distance,0.5*(r1+r2))
;  Debug va_ss(r1,r2,ham,distance)
;   Debug ve_ss(r1,r2,psi1,psi2,conc,distance)
;   Debug "---"
  temp.d=ve_ss(r1,r2,psi1,psi2,conc,distance)+va_ss(r1,r2,ham,distance);+v_born(ham,distance,0.5*(r1+r2))
 ; Debug temp
  ProcedureReturn temp
  
EndProcedure  

Procedure.d ve_pp(distance.d,conc.d,area.d,psi1.d,psi2.d)
  
  ;elimelech
  
  kappa.d=kappa(conc) 
  ;   temp.d=2*psi1*psi2-(psi1*psi1+psi2*psi2)*Exp(-kappa*distance)
  ;   temp=temp/(Exp(kappa*distance)-Exp(-kappa*distance))
  ;   temp=temp*e_zero*e_rel*kappa*area
  
  temp.d=64000*conc*avogadro*k_boltz*temperature/kappa*gamma(psi1)*gamma(psi2)*Exp(-kappa*distance)*area
  ProcedureReturn temp
  
EndProcedure  

Procedure.d va_pp(area.d,thick.d,hamaker.d,distance.d)  
  
  ;elimelech
  
  result.d=-hamaker/(12*#PI)*(1/(distance*distance)+1/Pow(distance+2*thick,2)-2/Pow(distance+thick,2))*area
  ProcedureReturn result
  
EndProcedure  

Procedure.d vt_pp(area.d,thick.d,distance.d,conc.d,psi1.d,psi2.d,ham.d)
  ;    Debug ve(distance,conc,r1,r2,psi1,psi2)
  ;    Debug va(r1,r2,ham,distance)
  ;   Debug distance*Pow(10,9)
  ;  calldebugger
  temp.d=ve_pp(distance,conc,area,psi1,psi2)+va_pp(area,thick,ham,distance);+v_born(ham,distance,thick/2)
  ProcedureReturn temp
EndProcedure  

Procedure.d va_sp(r1.d,distance.d,ham.d)
  
  temp.d
  temp=-ham/6*(r1/distance+r1/(distance+2*r1)+Log(distance/(distance+2*r1)))
  
  ProcedureReturn temp
  
EndProcedure  

Procedure.d ve_sp(r1.d,psi1.d,psi2.d,conc.d,distance.d)
  temp.d
  kappa.d=kappa(conc) 
  temp=r1*128000*#PI*conc*avogadro*k_boltz*temperature/(kappa*kappa)
  temp=temp*gamma(psi1)*gamma(psi2)*Exp(-kappa*distance)
  
  ;   z.d=Pow(TanH(e_charge*psi1/(4*k_boltz*temperature)),2)*Pow(k_boltz*temperature/e_charge,2)*64*#PI*e_zero*e_rel
  ;   temp=0.5*z*r1*Exp(-kappa*distance)
  ProcedureReturn temp
EndProcedure

Procedure.d vt_sp(r1.d,distance.d,conc.d,psi1.d,psi2.d,ham.d)
  
  temp.d=ve_sp(r1,psi1,psi2,conc,distance)+va_sp(r1,distance,ham);+v_born(ham,distance,r1)
  ProcedureReturn temp
  
EndProcedure  

Procedure.d va_rr(length.d,ham.d,distance.d,r1.d,r2.d)
  
  ;Ohshima Electrical Phenomena at Interfaces and Biointerfaces: Fundamentals and ... ;parallel
  temp.d=Sqr(r1*r2/(r1+r2))
  temp=-temp*ham/(12*Sqr(2)*Pow(distance,3/2))*length
  
  ;crossed
  ;   temp.d=-ham*Sqr(r1*r2)/(6*distance);*length
  ProcedureReturn temp
  ;   
EndProcedure  

Procedure.d ve_rr(length.d,r1.d,r2.d,psi1.d,psi2.d,distance.d,conc.d)
  
  ;Ohshima Electrical Phenomena at Interfaces and Biointerfaces: Fundamentals and ... parallal
  kappa.d=kappa(conc)
  temp.d=Exp(-kappa*distance)
  temp=temp*psi1*psi2*e_zero*e_rel*Sqr(kappa)*2*Sqr(2*r1*r2*#PI/(r1+r2))*length
  
  ;crossed
  ;   kappa.d=kappa(conc)
  ;   temp.d=Exp(-kappa*distance)
  ;   temp=4*#PI*Sqr(r1*r2)*psi1*psi2*e_zero*e_rel*temp;*length
  
  ProcedureReturn temp
  
EndProcedure  

Procedure.d vt_rr(length.d,ham.d,distance.d,r1.d,r2.d,psi1.d,psi2.d,conc.d)
  
  temp.d=va_rr(length,ham,distance,r1,r2)+ve_rr(length,r1,r2,psi1,psi2,distance,conc);+v_born(ham,distance,0.5*(r1+r2))
  ProcedureReturn temp
  
EndProcedure  

Procedure.d va_rp(length.d,ham.d,distance.d,r1.d)
  
  ;Ohshima Electrical Phenomena at Interfaces and Biointerfaces: Fundamentals and ...
  temp.d=Sqr(r1)
  temp=-temp*ham/(12*Sqr(2)*Pow(distance,3/2))*length
  ProcedureReturn temp
  
EndProcedure  

Procedure.d ve_rp(length.d,r1.d,psi1.d,psi2.d,distance.d,conc.d)
  
  ;Ohshima Electrical Phenomena at Interfaces and Biointerfaces: Fundamentals and ...
  kappa.d=kappa(conc)
  temp.d=Exp(-kappa*distance)
  temp=temp*psi1*psi2*e_zero*e_rel*Sqr(kappa)*2*Sqr(2*r1*#PI)*length
  
  ProcedureReturn temp
  
EndProcedure  

Procedure.d vt_rp(length.d,ham.d,distance.d,r1.d,psi1.d,psi2.d,conc.d)

  temp.d=va_rp(length,ham,distance,r1)+ve_rp(length,r1,psi1,psi2,distance,conc);+v_born(ham,distance,r1)
  ProcedureReturn temp
  
EndProcedure  

Procedure.s get_exp(value.d)
  temp.s
  If value<0
    temp="-"+StrD(Abs(value)/Pow(10,Round(Log10(Abs(value)),#PB_Round_Down)))+"E"+Str(Round(Log10(Abs(value)),#PB_Round_Down))
  Else
    temp=StrD(value/Pow(10,Round(Log10(value),#PB_Round_Down)))+"E"+Str(Round(Log10(value),#PB_Round_Down))
  EndIf
  ProcedureReturn temp
EndProcedure 

Procedure.d energy_vs_distance_ss(distance.d)
  
  temp.d=vt_ss(sphere\diameter/2,sphere\diameter/2,distance,ionic_strength,sphere_zetapot,sphere_zetapot,sphere_hamaker)
  ProcedureReturn temp
  
EndProcedure  

Procedure.d energy_vs_distance_pp(distance.d)
  
  temp.d=vt_pp((plate_width+1)*(plate_length+1)*dx*dx,(plate_thickness+1)*dx,distance,ionic_strength,plate_zetapot,plate_zetapot,plate_hamaker)
  ;Debug temp/(k_boltz*temperature)
  ProcedureReturn temp
  
EndProcedure  

Procedure.d energy_vs_distance_sp(distance.d)
  
  temp.d=vt_sp(sphere\diameter/2,distance,ionic_strength,sphere_zetapot,plate_zetapot,hamakers(1,3))
  ;Debug temp/(k_boltz*temperature)
  ProcedureReturn temp
  
EndProcedure  

Procedure.d energy_vs_distance_rr(distance.d)
  
  temp.d=vt_rr((rod_length+1)*dx,rod_hamaker,distance,(rod_diameter+1)*dx/2,(rod_diameter+1)*dx/2,rod_zetapot,rod_zetapot,ionic_strength)
  ;Debug temp/(k_boltz*temperature)
  ProcedureReturn temp
  
EndProcedure  

Procedure.d energy_vs_distance_rp(distance.d)
  
  temp.d=vt_rp((rod_length+1)*dx,hamakers(2,3),distance,(rod_diameter+1)*dx/2,rod_zetapot,plate_zetapot,ionic_strength)
  ;Debug temp/(k_boltz*temperature)
  ProcedureReturn temp
  
EndProcedure  

Procedure.d energy_vs_distance_rs_as_p(distance.d)
  ;treating a sphere as a plate
  temp.d=vt_rp((rod_length+1)*dx,hamakers(1,2),distance,(rod_diameter+1)*dx/2,rod_zetapot,sphere_zetapot,ionic_strength)
  ;Debug temp/(k_boltz*temperature)
  
  ProcedureReturn temp
  
EndProcedure  

Procedure.d energy_vs_distance_sr_as_p(distance.d)
  ;treating a rod as as plate
  temp.d=vt_sp(sphere\diameter/2,distance,ionic_strength,sphere_zetapot,rod_zetapot,hamakers(1,2))
  ;Debug temp/(k_boltz*temperature)
  ; Debug temp/(k_boltz*temperature)
  ProcedureReturn temp
  
EndProcedure 

Procedure set_interaction_energies()
  ;   hamakers(1,1)=Pow(Sqr(sphere_hamaker)-Sqr(water_hamaker),2)
  ;   hamakers(2,2)=Pow(Sqr(rod_hamaker)-Sqr(water_hamaker),2)
  ;   hamakers(3,3)=Pow(Sqr(plate_hamaker)-Sqr(water_hamaker),2)
  ;   hamakers(1,2)=(Sqr(sphere_hamaker)-Sqr(water_hamaker))*(Sqr(rod_hamaker)-Sqr(water_hamaker))
  ;   hamakers(1,3)=(Sqr(sphere_hamaker)-Sqr(water_hamaker))*(Sqr(plate_hamaker)-Sqr(water_hamaker))
  ;   hamakers(2,3)=(Sqr(rod_hamaker)-Sqr(water_hamaker))*(Sqr(plate_hamaker)-Sqr(water_hamaker))
  ;   hamakers(2,1)=hamakers(1,2)
  ;   hamakers(3,1)=hamakers(1,3)
  ;   hamakers(3,2)=hamakers(2,3)
  
  ; israelavchili
  
  hamakers(1,1)=sphere_hamaker
  hamakers(2,2)=rod_hamaker
  hamakers(3,3)=plate_hamaker
  hamakers(1,2)=Sqr(sphere_hamaker*rod_hamaker)
  hamakers(1,3)=Sqr(sphere_hamaker*plate_hamaker)
  hamakers(2,3)=Sqr(rod_hamaker*plate_hamaker)
  hamakers(2,1)=hamakers(1,2)
  hamakers(3,1)=hamakers(1,3)
  hamakers(3,2)=hamakers(2,3)
  
  ;inetraction energies between different materials based on DLVO
  max1.d
  max2.d
  max3.d
  max4.d
  max5.d
  max6.d
  i1.d
  i2.d
  i3.d
  i4.d
  i5.d
  i6.d
  min1.d=Infinity()
  min2.d=Infinity()
  min3.d=Infinity()
  min4.d=Infinity()
  min5.d=Infinity()
  min6.d=Infinity()
  j1.d
  j2.d
  j3.d
  j4.d
  j5.d
  j6.d
  
  For i=1 To 1000 
    ;Debug kappa(ionic_strength)*i*Pow(10,-10)
    ;dlvo_sphere_sphere(i)=vt(sphere\diameter,sphere\diameter,i*Pow(10,-10),ionic_strength,sphere_zetapot,sphere_zetapot,sphere_hamaker)/(k_boltz*temperature)
    dlvo_sphere_sphere(i)=vt_ss(sphere\diameter/2,sphere\diameter/2,i*Pow(10,-11),ionic_strength,sphere_zetapot,sphere_zetapot,sphere_hamaker)/(k_boltz*temperature)
    If max1=0 And min1>dlvo_sphere_sphere(i):min1=dlvo_sphere_sphere(i):j1=i*Pow(10,-11):Else:If max1=0:max1=min1:EndIf:EndIf
    If Not max1=0 And max1<dlvo_sphere_sphere(i):max1=dlvo_sphere_sphere(i):i1=i*Pow(10,-11):EndIf
    If sphere_diameter>rod_diameter   ;handle sphere as plate for large diameters
      dlvo_sphere_rod(i)=vt_rp((rod_length+1)*dx,hamakers(1,2),i*Pow(10,-11),(rod_diameter+1)*dx/2,sphere_zetapot,rod_zetapot,ionic_strength)/(k_boltz*temperature)
    Else         ;handle rod as plate for large diameters
      dlvo_sphere_rod(i)=vt_sp(sphere\diameter/2,i*Pow(10,-11),ionic_strength,sphere_zetapot,rod_zetapot,hamakers(1,2))/(k_boltz*temperature)
    EndIf 
    If max2=0 And min2>dlvo_sphere_rod(i):min2=dlvo_sphere_rod(i):j2=i*Pow(10,-11):Else:If max2=0:max2=min2:EndIf:EndIf
    If Not max2=0 And max2<dlvo_sphere_rod(i):max2=dlvo_sphere_rod(i):i2=i*Pow(10,-11):EndIf
    
    dlvo_sphere_plate(i)=vt_sp(sphere\diameter/2,i*Pow(10,-11),ionic_strength,sphere_zetapot,plate_zetapot,hamakers(1,3))/(k_boltz*temperature)
    If max3=0 And min3>dlvo_sphere_plate(i):min3=dlvo_sphere_plate(i):j3=i*Pow(10,-11):Else:If max3=0:max3=min3:EndIf:EndIf
    If Not max3=0 And max3<dlvo_sphere_plate(i):max3=dlvo_sphere_plate(i):i3=i*Pow(10,-11):EndIf
    
    dlvo_rod_rod(i)=vt_rr((rod_length+1)*dx,rod_hamaker,i*Pow(10,-11),(rod_diameter+1)*dx/2,(rod_diameter+1)*dx/2,rod_zetapot,rod_zetapot,ionic_strength)/(k_boltz*temperature)
    If max4=0 And min4>dlvo_rod_rod(i):min4=dlvo_rod_rod(i):j4=i*Pow(10,-11):Else:If max4=0:max4=min4:EndIf:EndIf
    If Not max4=0 And max4<dlvo_rod_rod(i):max4=dlvo_rod_rod(i):i4=i*Pow(10,-11):EndIf
    
    dlvo_rod_plate(i)=vt_rp((rod_length+1)*dx,hamakers(2,3),i*Pow(10,-11),(rod_diameter+1)*dx/2,rod_zetapot,plate_zetapot,ionic_strength)/(k_boltz*temperature)
    If max5=0 And min5>dlvo_rod_plate(i):min5=dlvo_rod_plate(i):j5=i*Pow(10,-11):Else:If max5=0:max5=min5:EndIf:EndIf
    If Not max5=0 And max5<dlvo_rod_plate(i):max5=dlvo_rod_plate(i):i5=i*Pow(10,-11):EndIf
    
    dlvo_plate_plate(i)=vt_pp((plate_length+1)*(plate_width+1)*dx*dx,(plate_thickness+1)*dx,i*Pow(10,-11),ionic_strength,plate_zetapot,plate_zetapot,plate_hamaker)/(k_boltz*temperature)
    If max6=0 And min6>dlvo_plate_plate(i):min6=dlvo_plate_plate(i):j6=i*Pow(10,-11):Else:If max6=0:max6=min6:EndIf:EndIf
    If Not max6=0 And max6<dlvo_plate_plate(i):max6=dlvo_plate_plate(i):i6=i*Pow(10,-11):EndIf    
  Next i  
  
  ;sphere sphere
  
  If i1>0
    i1=newtons_method(@energy_vs_distance_ss(),i1)
    If Not IsNAN(i1):energies(1,1)=energy_vs_distance_ss(i1)/(k_boltz*temperature):Else:energies(1,1)=0:EndIf
  Else
    energies(1,1)=0
  EndIf  
  If energies(1,1)<=0
    chances(1,1)=1
  Else 
    chances(1,1)=kappa(ionic_strength)*(sphere\diameter)*Exp(-energies(1,1))
  EndIf
  If j1<1000
    j1=newtons_method(@energy_vs_distance_ss(),j1)
    If Not IsNAN(j1):energies_detach(1,1)=energy_vs_distance_ss(j1)/(k_boltz*temperature):Else:energies_detach(1,1)=Infinity():EndIf
  Else  
    energies_detach(1,1)=Infinity()
  EndIf  
  If (energies(1,1)-energies_detach(1,1))<=0
    chances_detach(1,1)=1
  Else
    chances_detach(1,1)=kappa(ionic_strength)*(sphere\diameter)*Exp(-(energies(1,1)-energies_detach(1,1)))
  EndIf  
 
  ;sphere rod
  If i2>0
    If sphere_diameter>rod_diameter 
      i2=newtons_method(@energy_vs_distance_rs_as_p(),i2)
      If Not IsNAN(i2):energies(1,2)=energy_vs_distance_rs_as_p(i2)/(k_boltz*temperature):Else:energies(1,2)=0:EndIf
    Else
      i2=newtons_method(@energy_vs_distance_sr_as_p(),i2)
      If Not IsNAN(i2):energies(1,2)=energy_vs_distance_sr_as_p(i2)/(k_boltz*temperature):Else:energies(1,2)=0:EndIf
    EndIf  
  Else
    energies(1,2)=0
  EndIf 
  If energies(1,2)<=0
    chances(1,2)=1
  Else  
    chances(1,2)=kappa(ionic_strength)*((rod_diameter+1)*dx/2+sphere\diameter/2)*Exp(-energies(1,2))
  EndIf  
  energies(2,1)=energies(1,2)
  chances(2,1)=chances(1,2)
  If j2<1000
    If sphere_diameter>rod_diameter 
      j2=newtons_method(@energy_vs_distance_rs_as_p(),j2)
      If Not IsNAN(j2):energies_detach(1,2)=energy_vs_distance_rs_as_p(j2)/(k_boltz*temperature):Else:energies_detach(1,2)=Infinity():EndIf
    Else
      j2=newtons_method(@energy_vs_distance_sr_as_p(),j2)
      If Not IsNAN(j2):energies_detach(1,2)=energy_vs_distance_sr_as_p(j2)/(k_boltz*temperature):Else:energies_detach(1,2)=Infinity():EndIf
    EndIf
  Else  
    energies_detach(1,2)=Infinity()
  EndIf  
  If (energies(1,2)-energies_detach(1,2))<=0
    chances_detach(1,2)=1
  Else
    chances_detach(1,2)=kappa(ionic_strength)*((rod_diameter+1)*dx/2+sphere\diameter/2)*Exp(-(energies(1,2)-energies_detach(1,2)))
  EndIf
  energies_detach(2,1)=energies_detach(1,2)
  chances_detach(2,1)=chances_detach(1,2)

  ;sphere plate
    
  If i3>0
    i3=newtons_method(@energy_vs_distance_sp(),i3)
    If Not IsNAN(i3):energies(1,3)=energy_vs_distance_sp(i3)/(k_boltz*temperature):Else:energies(1,3)=0:EndIf
  Else
    energies(1,3)=0
  EndIf  
  If energies(1,3)<=0
    chances(1,3)=1  
  Else  
    chances(1,3)=kappa(ionic_strength)*((plate_thickness+1)*dx/2+sphere\diameter/2)*Exp(-energies(1,3))
  EndIf 
  energies(3,1)=energies(1,3)
  chances(3,1)=chances(1,3)
  If j3<1000
    j3=newtons_method(@energy_vs_distance_sp(),j3)
    If Not IsNAN(j3):energies_detach(1,3)=energy_vs_distance_sp(j3)/(k_boltz*temperature):Else:energies_detach(1,3)=Infinity():EndIf
  Else  
    energies_detach(1,3)=Infinity()
  EndIf  
  If (energies(1,3)-energies_detach(1,3))<=0
    chances_detach(1,3)=1
  Else
    chances_detach(1,3)=kappa(ionic_strength)*((plate_thickness+1)*dx/2+sphere\diameter/2)*Exp(-(energies(1,3)-energies_detach(1,3)))
  EndIf  
  energies_detach(3,1)=energies_detach(1,3)
  chances_detach(3,1)=chances_detach(1,3)
    
  ;rod rod
  
  If i4>0
    i4=newtons_method(@energy_vs_distance_rr(),i4)
    If Not IsNAN(i4):energies(2,2)=energy_vs_distance_rr(i4)/(k_boltz*temperature):Else:energies(2,2)=0:EndIf
  Else
    energies(2,2)=0
  EndIf  
  If energies(2,2)<=0
    chances(2,2)=1
  Else  
    chances(2,2)=kappa(ionic_strength)*((rod_diameter+1)*dx)*Exp(-energies(2,2))
  EndIf
  If j4<1000
    j4=newtons_method(@energy_vs_distance_rr(),j4)
    If Not IsNAN(j4):energies_detach(2,2)=energy_vs_distance_rr(j4)/(k_boltz*temperature):Else:energies_detach(2,2)=Infinity():EndIf
  Else  
    energies_detach(2,2)=Infinity()
  EndIf  
  If (energies(2,2)-energies_detach(2,2))<=0
    chances_detach(2,2)=1
  Else
    chances_detach(2,2)=kappa(ionic_strength)*((rod_diameter+1)*dx)*Exp(-(energies(2,2)-energies_detach(2,2)))
  EndIf  
    
  ;rod plate
  
  If i5>0
    i5=newtons_method(@energy_vs_distance_rp(),i5)
    If Not IsNAN(i5):energies(2,3)=energy_vs_distance_rp(i5)/(k_boltz*temperature):Else:energies(2,3)=0:EndIf
  Else
    energies(2,3)=0
  EndIf
  If energies(2,3)<=0
    chances(2,3)=1  
  Else  
    chances(2,3)=kappa(ionic_strength)*((rod_diameter+1)*dx/2+(plate_thickness+1)*dx/2)*Exp(-energies(2,3))
  EndIf
  energies(3,2)=energies(2,3)
  chances(3,2)=chances(2,3)
  If j5<1000
    j5=newtons_method(@energy_vs_distance_rp(),j5)
    If Not IsNAN(j5):energies_detach(2,3)=energy_vs_distance_rp(j5)/(k_boltz*temperature):Else:energies_detach(2,3)=Infinity():EndIf
  Else  
    energies_detach(2,3)=Infinity()
  EndIf  
  If (energies(2,3)-energies_detach(2,3))<=0
    chances_detach(2,3)=1
  Else
    chances_detach(2,3)=kappa(ionic_strength)*((rod_diameter+1)*dx/2+(plate_thickness+1)*dx/2)*Exp(-(energies(2,3)-energies_detach(2,3)))
  EndIf
  energies_detach(3,2)=energies_detach(2,3)
  chances_detach(3,2)=chances_detach(2,3)

  ;plate plate

  If i6>0
    i6=newtons_method(@energy_vs_distance_pp(),i6)
    If Not IsNAN(i6):energies(3,3)=energy_vs_distance_pp(i6)/(k_boltz*temperature):Else:energies(3,3)=0:EndIf
  Else
    energies(3,3)=0
  EndIf
  If energies(3,3)<=0
    chances(3,3)=1
  Else  
    chances(3,3)=kappa(ionic_strength)*((plate_thickness+1)*dx)*Exp(-energies(3,3))
  EndIf
  If j6<1000
    j6=newtons_method(@energy_vs_distance_pp(),j6)
    If Not IsNAN(j6):energies_detach(3,3)=energy_vs_distance_pp(j6)/(k_boltz*temperature):Else:energies_detach(3,3)=Infinity():EndIf
  Else  
    energies_detach(3,3)=Infinity()
  EndIf  
  If (energies(3,3)-energies_detach(3,3))<=0
    chances_detach(3,3)=1
  Else
    chances_detach(3,3)=kappa(ionic_strength)*((plate_thickness+1)*dx)*Exp(-(energies(3,3)-energies_detach(3,3)))
  EndIf

  StartDrawing(ImageOutput(im_DLVO))
  FrontColor(RGB(0,0,0))
  BackColor(RGB(255,255,255))
  DrawText(1,1,"DLVO Total Interaction Energies")
  scalex.d=200/1000
  
  
  Debug max1
  Debug max2
  Debug max3
  Debug max4
  Debug max5
  Debug max6
  max.d
;   If energy_vs_distance_ss(i1)>max:max=energy_vs_distance_ss(i1):EndIf
;   If sphere_diameter>rod_diameter 
;     If energy_vs_distance_rs_as_p(i2)>max:max=energy_vs_distance_rs_as_p(i2):EndIf
;   Else
;     If energy_vs_distance_sr_as_p(i2)>max:max=energy_vs_distance_sr_as_p(i2):EndIf
;   EndIf
;   If energy_vs_distance_sp(i3)>max:max=energy_vs_distance_sp(i3):EndIf
;   If energy_vs_distance_rr(i4)>max:max=energy_vs_distance_rr(i4):EndIf
;   If energy_vs_distance_rp(i5)>max:max=energy_vs_distance_rp(i5):EndIf
;   If energy_vs_distance_pp(i6)>max:max=energy_vs_distance_pp(i6):EndIf
;  
;   
  scaley.d
  LineXY(101,20,101,100,RGB(150,150,150))
  LineXY(101,100,301,100,RGB(150,150,150))
  LineXY(101,140,101,220,RGB(150,150,150))
  LineXY(101,220,301,220,RGB(150,150,150))
  LineXY(101,260,101,340,RGB(150,150,150))
  LineXY(101,340,301,340,RGB(150,150,150))
  LineXY(101,380,101,460,RGB(150,150,150))
  LineXY(101,460,301,460,RGB(150,150,150))
  LineXY(101,500,101,580,RGB(150,150,150))
  LineXY(101,580,301,580,RGB(150,150,150))
  LineXY(101,620,101,700,RGB(150,150,150))
  LineXY(101,700,301,700,RGB(150,150,150))
  
  If i1>0:LineXY(i1*scalex*Pow(10,11)+101,20,i1*scalex*Pow(10,11)+101,100,RGB(200,0,0)):EndIf
  If i2>0:LineXY(i2*scalex*Pow(10,11)+101,140,i2*scalex*Pow(10,11)+101,220,RGB(200,0,0)):EndIf
  If i3>0:LineXY(i3*scalex*Pow(10,11)+101,260,i3*scalex*Pow(10,11)+101,340,RGB(200,0,0)):EndIf
  If i4>0:LineXY(i4*scalex*Pow(10,11)+101,380,i4*scalex*Pow(10,11)+101,460,RGB(200,0,0)):EndIf
  If i5>0:LineXY(i5*scalex*Pow(10,11)+101,500,i5*scalex*Pow(10,11)+101,580,RGB(200,0,0)):EndIf
  If i6>0:LineXY(i6*scalex*Pow(10,11)+101,620,i6*scalex*Pow(10,11)+101,700,RGB(200,0,0)):EndIf
  
  If Not IsNAN(i1)
    max=energy_vs_distance_ss(i1)/(k_boltz*temperature)
    scaley=100/(max+10)
    For i=1 To 999
      If dlvo_sphere_sphere(i)>=-10 And dlvo_sphere_sphere(i)<max:LineXY(i*scalex+101,100-dlvo_sphere_sphere(i)*scaley,(i+1)*scalex+101,100-dlvo_sphere_sphere(i+1)*scaley,RGB(0,0,0)):EndIf
    Next i
  EndIf
  
  If Not IsNAN(i2)
    If sphere_diameter>rod_diameter 
      max=energy_vs_distance_rs_as_p(i2)/(k_boltz*temperature)
    Else
      max=energy_vs_distance_sr_as_p(i2)/(k_boltz*temperature)  
    EndIf
    scaley=100/(max+10)
   
    For i=1 To 999
      If dlvo_sphere_rod(i)>=-10 And dlvo_sphere_rod(i)<max:LineXY(i*scalex+101,220-dlvo_sphere_rod(i)*scaley,(i+1)*scalex+101,220-dlvo_sphere_rod(i+1)*scaley,RGB(0,0,0)):EndIf
    Next i
  EndIf
  
  If Not IsNAN(i3)
    max=energy_vs_distance_sp(i3)/(k_boltz*temperature)
    scaley=100/(max+10)
    For i=1 To 999
      If dlvo_sphere_plate(i)>=-10 And dlvo_sphere_plate(i)<max:LineXY(i*scalex+101,340-dlvo_sphere_plate(i)*scaley,(i+1)*scalex+101,340-dlvo_sphere_plate(i+1)*scaley,RGB(0,0,0)):EndIf
    Next i
  EndIf
  
  If Not IsNAN(i4)
    max=energy_vs_distance_rr(i4)/(k_boltz*temperature)
    scaley=100/(max+10)
    For i=1 To 999
      If dlvo_rod_rod(i)>=-10 And dlvo_rod_rod(i)<max:LineXY(i*scalex+101,460-dlvo_rod_rod(i)*scaley,(i+1)*scalex+101,460-dlvo_rod_rod(i+1)*scaley,RGB(0,0,0)):EndIf
    Next i
  EndIf
  
  If Not IsNAN(i5)
    max=energy_vs_distance_rp(i5)/(k_boltz*temperature)
    scaley=100/(max+10)
    For i=1 To 999
      If dlvo_rod_plate(i)>=-10 And dlvo_rod_plate(i)<max:LineXY(i*scalex+101,580-dlvo_rod_plate(i)*scaley,(i+1)*scalex+101,580-dlvo_rod_plate(i+1)*scaley,RGB(0,0,0)):EndIf
    Next i
  EndIf
  
  If Not IsNAN(i6)
    max=energy_vs_distance_pp(i6)/(k_boltz*temperature)
    scaley=100/(max+10)
    For i=1 To 999
      If dlvo_plate_plate(i)>=-10 And dlvo_plate_plate(i)<max:LineXY(i*scalex+101,700-dlvo_plate_plate(i)*scaley,(i+1)*scalex+101,700-dlvo_plate_plate(i+1)*scaley,RGB(0,0,0)):EndIf
    Next i
  EndIf
  
  DrawText(1,80,"Sphere/Sphere")
  DrawText(1,200,"Sphere/Rod")
  DrawText(1,320,"Sphere/Plate")
  DrawText(1,440,"Rod/Rod")
  DrawText(1,560,"Rod/Plate")
  DrawText(1,680,"Plate/Plate")
  
  DrawText(151,80,StrD(energies(1,1),2)+" k_B*T; Lg(a)="+StrD(Log10(chances(1,1)),2)+" Lg(b)="+StrD(Log10(chances_detach(1,1)),2))
  DrawText(151,200,StrD(energies(1,2),2)+" k_B*T; Lg(a)="+StrD(Log10(chances(1,2)),2)+" Lg(b)="+StrD(Log10(chances_detach(1,2)),2))
  DrawText(151,320,StrD(energies(1,3),2)+" k_B*T; Lg(a)="+StrD(Log10(chances(1,3)),2)+" Lg(b)="+StrD(Log10(chances_detach(1,3)),2))
  DrawText(151,440,StrD(energies(2,2),2)+" k_B*T; Lg(a)="+StrD(Log10(chances(2,2)),2)+" Lg(b)="+StrD(Log10(chances_detach(2,2)),2))
  DrawText(151,560,StrD(energies(2,3),2)+" k_B*T; Lg(a)="+StrD(Log10(chances(2,3)),2)+" Lg(b)="+StrD(Log10(chances_detach(2,3)),2))
  DrawText(151,680,StrD(energies(3,3),2)+" k_B*T; Lg(a)="+StrD(Log10(chances(3,3)),2)+" Lg(b)="+StrD(Log10(chances_detach(3,3)),2))
  
  
;   Dim results.d(100,100)
;   ionic_strength=0.01
;   temp.d=0
;         step_i.d=Pow(100,1/100)
;         i0.d=Pow(10,-21)       
;         step_p.d=30/100000
;   For i=0 To 100
;             
;     p0.d=0
;     sphere_hamaker=i0*Pow(step_i,i)
; ;ionic_strength=i0*Pow(step_i,i)
;       
;     For j=0 To 100
; 
;       
;       sphere_zetapot=p0+j*step_p
;       max1=0
;      
;       For k=1 To 1000 
;     If max1<energy_vs_distance_ss(k*Pow(10,-10)):max1=energy_vs_distance_ss(k*Pow(10,-10)):temp=k*Pow(10,-10):EndIf
;     Next k
;       
;       temp=newtons_method(@energy_vs_distance_ss(),temp)  
;       If energy_vs_distance_ss(temp)/(k_boltz*temperature)<0 Or energy_vs_distance_ss(temp)/(k_boltz*temperature)>Pow(10,6) 
;         results(i,j)=0
;         Else
;       results(i,j)=energy_vs_distance_ss(temp)/(k_boltz*temperature)
;     EndIf  
;     Next j
;   Next i  
;   
;   CreateFile(0,"sens_out.txt")
;   For i=0 To 100
;     s.s=""
;     For j=0 To 100
;       If j<100
;         s+StrD(results(i,j))+Chr(9)
;       Else
;         s+StrD(results(i,j))
;       EndIf  
;       
;     Next j  
;   WriteStringN(0,s)  
;   Next i  
;   CloseFile(0)
;  End
  StopDrawing()

EndProcedure  

Procedure.l color(type.i)
  temp.l
  
  Select type
    Case 1
      temp=RGB(200,50,50)
    Case 2
      temp=RGB(150,150,150)
    Case 3
      temp=RGB(200,200,200)
  EndSelect  
  
  ProcedureReturn temp
EndProcedure  

Procedure draw()
  
  sizex.i=nx*scale_x+scale_z*nz
  sizey.i=scale_y*ny+scale_z*2*nz
  
  StartDrawing(ImageOutput(im_aggregate))
  Box(0,0,102+sizex,301+sizey,RGB(255,255,255))
  drawstuff=1
  
  nr_particles.i=0
  meanfreepath.d=0
  meanlifetime.d=0
  
  If drawstuff
    If mode=1
      For i=0 To ArraySize(clusters(0)\particles())
        
        For j=0 To ArraySize(clusters(0)\particles(i)\points())
          gray1=clusters(0)\particles(i)\points(j)\z*180/nz
          gray2=gray1
          gray3=gray1
          If clusters(0)\particles(i)\id=2
            gray2/2
            gray3/2
          EndIf
          If i=0:gray1=200:gray2=200:gray3=200:EndIf
          Plot(100+scale_x*clusters(0)\particles(i)\points(j)\x+scale_z*clusters(0)\particles(i)\points(j)\z,100+scale_z*nz+scale_y*(ny-clusters(0)\particles(i)\points(j)\y)-scale_z*clusters(0)\particles(i)\points(j)\z,RGB(gray1,gray2,gray3))
          ;Plot(100+clusters()\particles()\points()\x,100+ny-clusters()\particles()\points()\y,RGB(gray,gray,gray))
        Next   
      Next  
      
    Else  
      
      For i=0 To nr_clusters 
        For j=0 To ArraySize(clusters(i)\particles())
          For k=0 To ArraySize(clusters(i)\particles(j)\points())
            gray1=clusters(i)\particles(j)\points(k)\z*180/(nz+1)
            gray2=gray1
            gray3=gray1
            If clusters(i)\particles(j)\id=2
              gray2/2
              gray3/2
            EndIf
;             If Not mode=2 And i=0
;               gray1=255:gray2=0:gray3=0
;             EndIf  
           ; If i=0:gray1=255:gray2=0:gray3=0:EndIf
            Plot(100+scale_x*clusters(i)\particles(j)\points(k)\x+scale_z*clusters(i)\particles(j)\points(k)\z,100+scale_z*nz+scale_y*(ny-clusters(i)\particles(j)\points(k)\y)-scale_z*clusters(i)\particles(j)\points(k)\z,RGB(gray1,gray2,gray3))
            ;Plot(100+clusters()\particles()\points()\x,100+ny-clusters()\particles()\points()\y,RGB(gray,gray,gray))
          Next
        Next
          meanlifetime+clusters(i)\lifetime
          meanfreepath+clusters(i)\freepath
      Next   
    EndIf
  EndIf
  ; For i=0 To nx:For j=0 To ny: For k=0 To nz
  ;       If field_clusters(i,j,k) :Plot(100+scale_x*i+scale_z*k,100+scale_z*nz+scale_y*(ny-j)-scale_z*k,RGB(255,0,0)):EndIf
  ;       Next k:Next j:Next i
  StopDrawing()
  
;   Static nr.i
;   
;     CreateDirectory(GetCurrentDirectory()+"moviee")
;     SaveImage(im_aggregate,GetCurrentDirectory()+"moviee\"+Str(nr)+".png", #PB_ImagePlugin_PNG )
;   nr+1
 
  StartDrawing(SpriteOutput(sprite))
   FrontColor(RGB(0,0,0))
   BackColor(RGB(255,255,255))
   Box(0,0,800+sizex,700+sizey,RGB(255,255,255))
  DrawImage(ImageID(im_aggregate),100,100)

  If show_dlvo:DrawImage(ImageID(im_DLVO),sizex+350,1):EndIf
  If allow_attach:DrawText(10,10,"Attachment allowed"):EndIf
  If allow_detach:DrawText(10,30,"Detachment allowed"):EndIf
  If sediment:DrawText(10,50,"Sedimentation allowed"):EndIf
  If allow_rotate:DrawText(10,70,"Rotation allowed"):EndIf
  
  DrawText(10,90,"press '3' to enter static 3D mode")
  DrawText(10,110,"press '4' to enter dynamic 3D mode")
  DrawText(10,130,"press 'd' to switch DLVO/histogram view")
  DrawText(10,150,"press 'e' to export current state")
  DrawText(10,170,"press 'Ctrl+C' to kill program")
  
  DrawText(20,sizey,"number of steps: "+Str(counter))
  DrawText(20,20+sizey, "timestep in ms: "+StrD(timestep*1000))
  
  DrawText(20,40+sizey,"free spheres: "+StrD(timeseries(n_timeseries)\freeparts(0)))
  DrawText(20,60+sizey,"free rods: "+StrD(timeseries(n_timeseries)\freeparts(1)))
  DrawText(20,80+sizey,"free plates: "+StrD(timeseries(n_timeseries)\freeparts(2)))
  
  
  DrawText(20,100+sizey,"clusters: "+Str(nr_clusters+1))  
  DrawText(20,120+sizey,"time: "+StrD(time,5)+" s")
  DrawText(20,140+sizey,"calculation time: "+Str(elapsedtime)+" ms")
  DrawText(20,160+sizey,"largest cluster ("+Str(nr_largest_cluster)+"): "+Str(largest_cluster))
  DrawText(20,180+sizey,"solid volume fraction: "+StrD(total_mass/((nx+1)*(ny+1)*(nz+1))))
  DrawText(20,200+sizey,"mean free path: "+StrD(meanfreepath/nr_clusters_init))
  DrawText(20,220+sizey,"mean lifetime: "+StrD(meanlifetime/nr_clusters_init))
  DrawText(20,250+sizey,"mass distribution")
  DrawText(20,370+sizey,"gyration distribution")
  DrawText(20,490+sizey,"fractal dim. distribution")
  scalex.d
  scaley.d
  temp.d
  
  For i=0 To ArraySize(masses())
    If masses(i)\amount>temp:temp=masses(i)\amount:EndIf
  Next i  
  If Not temp=0:scaley=100/temp:EndIf
  If Not masses(ArraySize(masses()))\class-masses(0)\class=0:scalex=200/(masses(ArraySize(masses()))\class-masses(0)\class):EndIf
  
  For i=0 To ArraySize(masses())
    Box(200+(masses(i)\class-masses(0)\class)*scalex,300+sizey,2,-masses(i)\amount*scaley,RGB(0,0,0))
    ;LineXY(200+masses(i)\class*scalex,300+nx+0.2*nz-masses(i)\amount*masses(i)\class*scaley,200+masses(i+1)\class*scalex,300+nx+0.2*nz-masses(i+1)\amount*masses(i+1)\class*scaley,RGB(0,0,0))    
  Next i
  DrawText(200,300+sizey,StrD(masses(0)\class))
  DrawText(400,300+sizey,StrD(masses(ArraySize(masses()))\class))
  
  If Not timeseries_maxmass=0:scaley=100/timeseries_maxmass:EndIf
  For i=1 To 200;n_timeseries
    i1=Round((i-1)*n_timeseries/200,#PB_Round_Nearest)
    i2=Round(i*n_timeseries/200,#PB_Round_Nearest)
   LineXY(200+i-1,300+sizey-timeseries(i1)\mass*scaley,200+i,300+sizey-timeseries(i2)\mass*scaley,RGB(200,100,100))
  Next i 
  
  
  temp=0
  For i=0 To ArraySize(gyration())
    If gyration(i)\amount>temp:temp=gyration(i)\amount:EndIf
  Next i  
  If Not temp=0:scaley=100/temp:EndIf
  If Not gyration(ArraySize(gyration()))\class-gyration(0)\class=0:scalex=200/(gyration(ArraySize(gyration()))\class-gyration(0)\class):EndIf
  DrawText(200,420+sizey,StrD(gyration(0)\class*1000000,3)+"µm")
  DrawText(400,420+sizey,StrD(gyration(ArraySize(gyration()))\class*1000000,3)+"µm")
  
  For i=0 To ArraySize(gyration())
    Box(200+(gyration(i)\class-gyration(0)\class)*scalex,420+sizey,2,-gyration(i)\amount*scaley,RGB(0,0,0))
    ;LineXY(200+masses(i)\class*scalex,300+nx+0.2*nz-masses(i)\amount*masses(i)\class*scaley,200+masses(i+1)\class*scalex,300+nx+0.2*nz-masses(i+1)\amount*masses(i+1)\class*scaley,RGB(0,0,0))    
  Next i
  
  If Not timeseries_maxgyration=0:scaley=100/timeseries_maxgyration:EndIf
  For i=1 To 200;n_timeseries
    i1=Round((i-1)*n_timeseries/200,#PB_Round_Nearest)
    i2=Round(i*n_timeseries/200,#PB_Round_Nearest)
   LineXY(200+i-1,420+sizey-timeseries(i1)\gyration*scaley,200+i,420+sizey-timeseries(i2)\gyration*scaley,RGB(200,100,100))
  Next i   
  
  temp=0
  For i=0 To ArraySize(fractal_dims())
    If fractal_dims(i)\amount>temp:temp=fractal_dims(i)\amount:EndIf
  Next i  
  If Not temp=0:scaley=100/temp:EndIf
  If Not fractal_dims(ArraySize(fractal_dims()))\class-fractal_dims(0)\class=0
    scalex=200/(fractal_dims(ArraySize(fractal_dims()))\class-fractal_dims(0)\class)
  EndIf
  DrawText(200,540+sizey,StrD(fractal_dims(0)\class,3))
  DrawText(400,540+sizey,StrD(fractal_dims(ArraySize(fractal_dims()))\class,3))

  For i=0 To ArraySize(fractal_dims())
    Box(200+(fractal_dims(i)\class-fractal_dims(0)\class)*scalex,540+sizey,2,-fractal_dims(i)\amount*scaley,RGB(0,0,0))
    ;LineXY(200+masses(i)\class*scalex,300+nx+0.2*nz-masses(i)\amount*masses(i)\class*scaley,200+masses(i+1)\class*scalex,300+nx+0.2*nz-masses(i+1)\amount*masses(i+1)\class*scaley,RGB(0,0,0))    
  Next i
  
  If Not timeseries_maxfractal=0:scaley=100/timeseries_maxfractal:EndIf
  For i=1 To 200;n_timeseries
    i1=Round((i-1)*n_timeseries/200,#PB_Round_Nearest)
    i2=Round(i*n_timeseries/200,#PB_Round_Nearest)
   LineXY(200+i-1,540+sizey-timeseries(i1)\fractal*scaley,200+i,540+sizey-timeseries(i2)\fractal*scaley,RGB(200,100,100))
 Next i 
 
 If Not show_dlvo
   
   sum.i=timeseries(n_timeseries)\attach_type(0)+timeseries(n_timeseries)\attach_type(1)+timeseries(n_timeseries)\attach_type(2) ;total bonds
   DrawText(sizex+250,20,"bond spheres-spheres: "+StrD(timeseries(n_timeseries)\attach_minerals(0)/sum))
   DrawText(sizex+250,40,"bond spheres-rods: "+StrD(timeseries(n_timeseries)\attach_minerals(1)/sum))
   DrawText(sizex+250,60,"bond spheres-plates: "+StrD(timeseries(n_timeseries)\attach_minerals(2)/sum))
   DrawText(sizex+250,80,"bond rods-rods: "+StrD(timeseries(n_timeseries)\attach_minerals(3)/sum))
   DrawText(sizex+250,100,"bond rods-plates: "+StrD(timeseries(n_timeseries)\attach_minerals(4)/sum))
   DrawText(sizex+250,120,"bond plates-plates: "+StrD(timeseries(n_timeseries)\attach_minerals(5)/sum))   
  
 For j=0 To ny   
   If max1<profiles(1,j):max1=profiles(1,j):EndIf
   If max2<profiles(2,j):max2=profiles(2,j):EndIf
   If max3<profiles(3,j):max3=profiles(3,j):EndIf  
 Next j
 
 If plate_nr>0
 For j=1 To ny
   LineXY(sizex+450+profiles(3,j-1)*100/max3,(ny-j+1)*scale_y+scale_z*nz+200,sizex+450+profiles(3,j)*100/max3,(ny-j)*scale_y+scale_z*nz+200,RGB(0,0,150))
 Next j 
 EndIf
 If sphere_nr>0
 For j=1 To ny
   LineXY(sizex+250+profiles(1,j-1)*100/max1,(ny-j+1)*scale_y+scale_z*nz+200,sizex+250+profiles(1,j)*100/max1,(ny-j)*scale_y+scale_z*nz+200)   
 Next j 
 EndIf
 If rod_nr>0
 For j=1 To ny  
   LineXY(sizex+350+profiles(2,j-1)*100/max2,(ny-j+1)*scale_y+scale_z*nz+200,sizex+350+profiles(2,j)*100/max2,(ny-j)*scale_y+scale_z*nz+200,RGB(150,0,0))
 Next j 
 EndIf

 
 DrawText(sizex+250,ny*scale_y+scale_z*nz+200,StrD(timeseries(n_timeseries)\meanz_spheres,0)+"+-"+StrD(timeseries(n_timeseries)\sdz_spheres,0))
 DrawText(sizex+350,ny*scale_y+scale_z*nz+200,StrD(timeseries(n_timeseries)\meanz_rods,0)+"+-"+StrD(timeseries(n_timeseries)\sdz_rods,0))
  DrawText(sizex+450,ny*scale_y+scale_z*nz+200,StrD(timeseries(n_timeseries)\meanz_plates,0)+"+-"+StrD(timeseries(n_timeseries)\sdz_plates,0))
   
   DrawText(sizex+250,ny*scale_y+scale_z*nz+240,"corr_spheres/rods: "+StrD(timeseries(n_timeseries)\corr_sphererod))
   DrawText(sizex+250,ny*scale_y+scale_z*nz+260,"corr_spheres/plates: "+StrD(timeseries(n_timeseries)\corr_sphereplate))
   DrawText(sizex+250,ny*scale_y+scale_z*nz+280,"corr_rods/plates: "+StrD(timeseries(n_timeseries)\corr_rodplate))
  
 EndIf
  StopDrawing()
 
  ;ClipSprite(sprite,0,0,1000,1000)
  RenderWorld()
 DisplaySprite(sprite,0,0)
  FlipBuffers()
  
EndProcedure  

Procedure open_parameters_window()
  
  OpenPreferences(GetCurrentDirectory()+"init.dat")
  
  nx=ReadPreferenceInteger("DLA_nx",200)
  ny=ReadPreferenceInteger("DLA_ny",200)
  nz=ReadPreferenceInteger("DLA_nz",200)
  mode_dla=ReadPreferenceInteger("DLA_mode_DLA",1)
  mode=ReadPreferenceInteger("DLA_mode",2)
  mode_fraction=ReadPreferenceInteger("DLA_mode_fraction",1)
  sphere_diameter=ReadPreferenceInteger("DLA_sphere_diameter",10)
  rod_diameter=ReadPreferenceInteger("DLA_rod_diameter",0)
  rod_length=ReadPreferenceInteger("DLA_rod_length",5)
  plate_thickness=ReadPreferenceInteger("DLA_plate_thickness",0)
  plate_length=ReadPreferenceInteger("DLA_plate_length",4)
  plate_width=ReadPreferenceInteger("DLA_plate_width",2)
  sphere_nr=ReadPreferenceInteger("DLA_sphere_nr",10)
  plate_nr=ReadPreferenceInteger("DLA_plate_nr",0)
  rod_nr=ReadPreferenceInteger("DLA_rod_nr",4000)
  sphere_vol=ReadPreferenceDouble("DLA_sphere_vol",0)
  plate_vol=ReadPreferenceDouble("DLA_plate_vol",0)
  rod_vol=ReadPreferenceDouble("DLA_rod_vol",0)
  sphere_hamaker=ReadPreferenceDouble("DLA_sphere_hamaker",1.02E-20)
  plate_hamaker=ReadPreferenceDouble("DLA_plate_hamaker",2.5E-20)
  rod_hamaker=ReadPreferenceDouble("DLA_rod_hamaker",2.29E-20)
  sphere_zetapot=ReadPreferenceDouble("DLA_sphere_zetapot",0.003)
  plate_zetapot=ReadPreferenceDouble("DLA_plate_zetapot",0.002)
  rod_zetapot=ReadPreferenceDouble("DLA_rod_zetapot",0.001)
  temperature=ReadPreferenceDouble("DLA_temperature",298)
  ionic_strength=ReadPreferenceDouble("DLA_ionic_strength",0.001)
  dx=ReadPreferenceDouble("DLA_dx",0.0000001)  
  sediment=ReadPreferenceInteger("DLA_sediment",0)
 ; allow_detach=ReadPreferenceInteger("DLA_detach",0)
  allow_attach=ReadPreferenceInteger("DLA_attach",0)
  allow_rotate=ReadPreferenceInteger("DLA_rotate",0)
 ; sigma=ReadPreferenceDouble("DLA_sigma",5E-10)
  termination_crit=ReadPreferenceDouble("DLA_crit",0)
  termination_type=ReadPreferenceInteger("DLA_crit_type",1)
  camx=ReadPreferenceDouble("DLA_camx",-435.44)
  camy=ReadPreferenceDouble("DLA_camy",197.37)
  camz=ReadPreferenceDouble("DLA_camz",-437.23)
  dircamx=ReadPreferenceDouble("DLA_dircamx",0.63)
  dircamy=ReadPreferenceDouble("DLA_dircamy",0.06)
  dircamz=ReadPreferenceDouble("DLA_dircamz",0.77)
  camfov=ReadPreferenceDouble("DLA_camfov",50)

  ClosePreferences()
  
  OpenWindow(#Win_Para,10,10,600,600,"Parameters")
  
  FrameGadget(#Frame_Grid,10,10,400,110,"Grid and Aggregation Model")
  
  OptionGadget(#Radio_DLA,30,90,50,20,"DLA")
  OptionGadget(#Radio_CCA,80,90,50,20,"CCA")
  OptionGadget(#Radio_DLACCA,130,90,70,20,"DLA+CCA")
  SetGadgetState(#Radio_DLA+mode-1,1)
  TextGadget(#Text_nx,30,30,20,20,"nx")
  SpinGadget(#Spin_nx,50,30,80,20,0,1000,#PB_Spin_Numeric)
  SetGadgetState(#Spin_nx,nx)
  TextGadget(#Text_ny,30,50,20,20,"ny")
  SpinGadget(#Spin_ny,50,50,80,20,0,1000,#PB_Spin_Numeric)
  SetGadgetState(#Spin_ny,ny)
  TextGadget(#Text_nz,30,70,20,20,"nz")
  SpinGadget(#Spin_nz,50,70,80,20,0,1000,#PB_Spin_Numeric)
  SetGadgetState(#Spin_nz,nz)
  TextGadget(#Text_dx,200,30,40,20,"dx [µm]")
  StringGadget(#String_dx,240,30,80,20,StrD(dx*1000000))
  FrameGadget(#Frame_nucleus,230,55,150,60,"DLA Nucleus")
  OptionGadget(#Radio_DLA_Point,250,70,50,20,"Point")
  OptionGadget(#Radio_DLA_Face,250,90,50,20,"Face")
  OptionGadget(#Radio_DLA_Edge,320,70,50,20,"Edge")
  OptionGadget(#Radio_DLA_Corner,320,90,50,20,"Corner")
  SetGadgetState(#Radio_DLA_Point+mode_dla-1,1)
  
  CheckBoxGadget(#Checkbox_rotate,430,10,110,20,"allow rotation")
  SetGadgetState(#Checkbox_rotate,allow_rotate)    
  CheckBoxGadget(#Checkbox_attach,430,30,110,20,"allow attachment")
  SetGadgetState(#Checkbox_attach,allow_attach)  
  ;CheckBoxGadget(#Checkbox_detach,430,50,110,20,"allow detachment")
  ;SetGadgetState(#Checkbox_detach,allow_detach)
  CheckBoxGadget(#Checkbox_sediment,430,70,110,20,"allow sedimentation")
  SetGadgetState(#Checkbox_sediment,sediment)
  
  FrameGadget(#Frame_geometry,10,120,300,160,"Geometry in units of dx")
  FrameGadget(#Frame_Fractions,310,120,240,140,"Fractions (absolute numbers or relative volumes)")
  TextGadget(#Text_Diameter,50,140,80,20,"Diameter")
  OptionGadget(#Radio_numbers,360,140,80,20,"Numbers")
  OptionGadget(#Radio_volumes,440,140,80,20,"Vol. Fraction")
  SetGadgetState(#Radio_numbers+mode_fraction-1,1)
  TextGadget(#Text_Qz,15,160,40,20,"Sphere")
  TextGadget(#Text_rod_length,50,180,50,20,"Length")
  TextGadget(#Text_rod_diameter,130,180,50,20,"Diameter")
  TextGadget(#Text_Gt,15,200,40,20,"Rod")
  TextGadget(#Text_Length,50,220,50,20,"Length")
  TextGadget(#Text_Width,130,220,50,20,"Width")
  TextGadget(#Text_Thickness,210,220,50,20,"Thickness")
  TextGadget(#Text_Il,15,240,40,20,"Plate")
  TextGadget(#Text_sphere_nr,315,160,40,20,"Sphere")
  TextGadget(#Text_rod_nr,315,180,40,20,"Rod")
  TextGadget(#Text_plate_nr,315,200,40,20,"Plate")
  SpinGadget(#Spin_sphere_diameter,50,160,80,20,0,1000,#PB_Spin_Numeric)
  SetGadgetState(#Spin_sphere_diameter,sphere_diameter+1)
  SpinGadget(#Spin_sphere_nr,360,160,80,20,0,100000,#PB_Spin_Numeric)
  SetGadgetState(#Spin_sphere_nr,sphere_nr)
  StringGadget(#String_sphere_volfrac,440,160,80,20,StrD(sphere_vol))
  SpinGadget(#Spin_rod_length,50,200,80,20,0,1000,#PB_Spin_Numeric)
  SetGadgetState(#Spin_rod_length,rod_length+1)
  SpinGadget(#Spin_rod_diameter,130,200,80,20,0,1000,#PB_Spin_Numeric)
  SetGadgetState(#Spin_rod_diameter,rod_diameter+1)
  SpinGadget(#Spin_rod_nr,360,180,80,20,0,100000,#PB_Spin_Numeric)
  SetGadgetState(#Spin_rod_nr,rod_nr)
  StringGadget(#String_rod_volfrac,440,180,80,20,StrD(rod_vol))
  SpinGadget(#Spin_plate_length,50,240,80,20,0,1000,#PB_Spin_Numeric)
  SetGadgetState(#Spin_plate_length,plate_length+1)
  SpinGadget(#Spin_plate_width,130,240,80,20,0,1000,#PB_Spin_Numeric)
  SetGadgetState(#Spin_plate_width,plate_width+1)
  SpinGadget(#Spin_plate_thickness,210,240,80,20,0,1000,#PB_Spin_Numeric)
  SetGadgetState(#Spin_plate_thickness,plate_thickness+1)  
  SpinGadget(#Spin_plate_nr,360,200,80,20,0,100000,#PB_Spin_Numeric)
  SetGadgetState(#Spin_plate_nr,plate_nr)
  StringGadget(#String_plate_volfrac,440,200,80,20,StrD(plate_vol))
  
  FrameGadget(#Frame_DLVO_Parameters,10,280,300,200,"DLVO Parameters")
  
  TextGadget(#Text_hamaker,50,300,100,20,"Hamaker [10^-20 J]")
  TextGadget(#Text_zetapot,150,300,100,20,"Zetapotential [mV]")
  TextGadget(#Text_Qz_DLVO,15,320,40,20,"Sphere")
  TextGadget(#Text_Gt_DLVO,15,340,40,20,"Rod")
  TextGadget(#Text_Il_DLVO,15,360,40,20,"Plate")
  StringGadget(#String_sphere_hamaker,50,320,100,20,StrD(sphere_hamaker/Pow(10,-20)))
  StringGadget(#String_rod_hamaker,50,340,100,20,StrD(rod_hamaker/Pow(10,-20)))
  StringGadget(#String_plate_hamaker,50,360,100,20,StrD(plate_hamaker/Pow(10,-20)))
  StringGadget(#String_sphere_zetapot,150,320,100,20,StrD(sphere_zetapot*1000))
  StringGadget(#String_rod_zetapot,150,340,100,20,StrD(rod_zetapot*1000))
  StringGadget(#String_plate_zetapot,150,360,100,20,StrD(plate_zetapot*1000))
  
  TextGadget(#Text_ionic_strength,30,400,100,20,"Ionic Strength [mM]")
  StringGadget(#String_ionic_strength,130,400,80,20,StrD(ionic_strength*1000))
  TextGadget(#Text_Temperature,30,420,100,20,"Temperature [K]")
  StringGadget(#String_Temperature,130,420,80,20,StrD(temperature))
  ;TextGadget(#Text_sigma,30,440,100,20,"coll. diameter [nm]")
  ;StringGadget(#String_sigma,130,440,80,20,StrD(sigma*Pow(10,9)))
  
  OptionGadget(#Radio_uncontrained,340,280,100,20,"unconstrained")
  OptionGadget(#Radio_mass,340,300,100,20,"mass")
  OptionGadget(#Radio_gyration,340,320,100,20,"radius of gyration")
  OptionGadget(#Radio_time,340,340,100,20,"time")
  OptionGadget(#Radio_nr,340,360,100,20,"nr")
  SetGadgetState(#Radio_uncontrained+termination_type-1,1)
  StringGadget(#String_crit,440,340,100,20,StrD(termination_crit))
  
  ButtonGadget(#Button_Start,10,480,80,20,"Start")
  Repeat
    event=WaitWindowEvent()
  Until (event=#PB_Event_CloseWindow Or (event=#WM_KEYUP And EventwParam() = #VK_ESCAPE)) Or (EventGadget()=#Button_Start And EventType()=#PB_EventType_LeftClick)
  
  If event=#PB_Event_CloseWindow Or (event=#WM_KEYUP And EventwParam() = #VK_ESCAPE):End:EndIf
  
  mode_dla=GetGadgetState(#Radio_DLA_Point)+2*GetGadgetState(#Radio_DLA_Face)+3*GetGadgetState(#Radio_DLA_Edge)+4*GetGadgetState(#Radio_DLA_Corner)
  mode=GetGadgetState(#Radio_DLA)+2*GetGadgetState(#Radio_CCA)+3*GetGadgetState(#Radio_DLACCA)
  mode_fraction=GetGadgetState(#Radio_numbers)+2*GetGadgetState(#Radio_volumes)
  dx=ValD(GetGadgetText(#String_dx))/1000000
  nx=GetGadgetState(#Spin_nx)
  ny=GetGadgetState(#Spin_ny)
  nz=GetGadgetState(#Spin_nz)
  sphere_diameter=GetGadgetState(#Spin_sphere_diameter)-1
  rod_length=GetGadgetState(#Spin_rod_length)-1
  rod_diameter=GetGadgetState(#Spin_rod_diameter)-1
  plate_length=GetGadgetState(#Spin_plate_length)-1
  plate_width=GetGadgetState(#Spin_plate_width)-1
  plate_thickness=GetGadgetState(#Spin_plate_thickness)-1
  sphere_nr=GetGadgetState(#Spin_sphere_nr)
  rod_nr=GetGadgetState(#Spin_rod_nr)
  plate_nr=GetGadgetState(#Spin_plate_nr)
  sphere_vol=ValD(GetGadgetText(#String_sphere_volfrac))
  rod_vol=ValD(GetGadgetText(#String_rod_volfrac))
  plate_vol=ValD(GetGadgetText(#String_plate_volfrac))
  sphere_hamaker=ValD(GetGadgetText(#String_sphere_hamaker))*Pow(10,-20)
  rod_hamaker=ValD(GetGadgetText(#String_rod_hamaker))*Pow(10,-20)
  plate_hamaker=ValD(GetGadgetText(#String_plate_hamaker))*Pow(10,-20)
  sphere_zetapot=ValD(GetGadgetText(#String_sphere_zetapot))/1000
  rod_zetapot=ValD(GetGadgetText(#String_rod_zetapot))/1000
  plate_zetapot=ValD(GetGadgetText(#String_plate_zetapot))/1000
  ionic_strength=ValD(GetGadgetText(#String_ionic_strength))/1000
  temperature=ValD(GetGadgetText(#String_Temperature))
  sediment=GetGadgetState(#Checkbox_sediment)
  ;allow_detach=GetGadgetState(#Checkbox_detach)
  allow_attach=GetGadgetState(#Checkbox_attach)
  allow_rotate=GetGadgetState(#Checkbox_rotate)
  ;sigma=ValD(GetGadgetText(#String_sigma))*Pow(10,-9)
  termination_type=1*GetGadgetState(#Radio_uncontrained)+2*GetGadgetState(#Radio_mass)+3*GetGadgetState(#Radio_gyration)+4*GetGadgetState(#Radio_time)+5*GetGadgetState(#Radio_nr)
  termination_crit=ValD(GetGadgetText(#String_crit))
  
  CloseWindow(#Win_Para)
  
  OpenPreferences(GetCurrentDirectory()+"init.dat")
  WritePreferenceInteger("DLA_nx",nx)
  WritePreferenceInteger("DLA_ny",ny)
  WritePreferenceInteger("DLA_nz",nz)
  WritePreferenceInteger("DLA_mode_DLA",mode_dla)
  WritePreferenceInteger("DLA_mode",mode)
  WritePreferenceInteger("DLA_mode_fraction",mode_fraction)
  WritePreferenceInteger("DLA_sphere_diameter",sphere_diameter)
  WritePreferenceInteger("DLA_rod_diameter",rod_diameter)
  WritePreferenceInteger("DLA_rod_length",rod_length)
  WritePreferenceInteger("DLA_plate_width",plate_width)
  WritePreferenceInteger("DLA_plate_length",plate_length)
  WritePreferenceInteger("DLA_plate_thickness",plate_thickness)
  WritePreferenceInteger("DLA_sphere_nr",sphere_nr)
  WritePreferenceInteger("DLA_plate_nr",plate_nr)
  WritePreferenceInteger("DLA_rod_nr",rod_nr)
  WritePreferenceDouble("DLA_sphere_vol",sphere_vol)
  WritePreferenceDouble("DLA_plate_vol",plate_vol)
  WritePreferenceDouble("DLA_rod_vol",rod_vol)
  WritePreferenceDouble("DLA_dx",dx)  ;in m
  WritePreferenceDouble("DLA_sphere_hamaker",sphere_hamaker)
  WritePreferenceDouble("DLA_plate_hamaker",plate_hamaker)
  WritePreferenceDouble("DLA_rod_hamaker",rod_hamaker)
  WritePreferenceDouble("DLA_sphere_zetapot",sphere_zetapot)
  WritePreferenceDouble("DLA_plate_zetapot",plate_zetapot)
  WritePreferenceDouble("DLA_rod_zetapot",rod_zetapot)
  WritePreferenceDouble("DLA_temperature",temperature)
  WritePreferenceDouble("DLA_ionic_strength",ionic_strength)
  WritePreferenceInteger("DLA_sediment",sediment)
 ; WritePreferenceInteger("DLA_detach",allow_detach)
  WritePreferenceInteger("DLA_attach",allow_attach)
  WritePreferenceInteger("DLA_rotate",allow_rotate)
  ;WritePreferenceDouble("DLA_sigma",sigma)
  WritePreferenceDouble("DLA_crit",termination_crit)
  WritePreferenceInteger("DLA_crit_type",termination_type)
  
  ClosePreferences()
  
  While nx*scale_x+scale_z*nz+300>DesktopWidth(0) Or ny*scale_y+scale_z*nz+500>DesktopHeight(0)
    scale_x*0.8
    scale_z*0.8
    scale_y*0.8
  Wend
  
EndProcedure  

Procedure.i check_termination()
  
  Select termination_type
    Case 1;unconstrained
      ProcedureReturn 0
    Case 2
      If timeseries_maxmass>=termination_crit:ProcedureReturn 1:EndIf
    Case 3
      If timeseries_maxgyration>=termination_crit:ProcedureReturn 1:EndIf
    Case 4
      If time>=termination_crit:ProcedureReturn 1:EndIf
    Case 5  
      If nr_clusters<=termination_crit-1:ProcedureReturn 1:EndIf
    Default
      ProcedureReturn 0
   EndSelect   
  
EndProcedure  

Procedure count_attach_type(a.i,b.i)
  
         If clusters(a)\nr_particles=1
         If clusters(b)\nr_particles=1
           n_monomono+1
         Else
           n_monopoly+1
         EndIf
       Else
         If clusters(b)\nr_particles=1
           n_monopoly+1
         Else
           n_polypoly+1
         EndIf         
       EndIf
       
EndProcedure  

Procedure aggregate_3d(mode.l)
  
  ;
  ; ------------------------------------------------------------
  ;
  ;   PureBasic - Static Geometry
  ;
  ;    (c) Fantaisie Software
  ;
  ; ------------------------------------------------------------
  ;
  
  For i=0 To nr_clusters
    For j=0 To ArraySize(clusters(i)\particles())
      HideEntity(clusters(i)\particles(j)\entity_handle,#True)
    Next j
  Next i  
  
  Static fov.d=70
  
  Define.f KeyX, KeyY, MouseX, MouseY
  Define nodex.f, nodez.f, Boost.f = 1, Yaw.f, Pitch.f
  
  ReleaseMouse(0)
  ;Add3DArchive(#PB_Compiler_Home+"examples/3d/Data/Textures", #PB_3DArchive_FileSystem)
  ;Add3DArchive(#PB_Compiler_Home+"examples/3d/Data/Scripts",#PB_3DArchive_FileSystem)
  ;Parse3DScripts()
  
  
;   If mode=2
;     CloseWindow(#Win_plot)
;     If Not Screen3DRequester():End:EndIf
;   EndIf
  WorldShadows(3)
  stats3.i=CreateSprite(#PB_Any,deskwidth,40)
  AmbientColor(0)
  
  
  tex_sphere=CreateTexture(#PB_Any,1024,1024)
  StartDrawing(TextureOutput(tex_sphere))
  Box(0, 0, TextureWidth(tex_sphere), TextureHeight(tex_sphere), RGB(17, 175, 214))
  StopDrawing()
  material_sphere=CreateMaterial(#PB_Any,TextureID(tex_sphere))
  
  tex_rod=CreateTexture(#PB_Any,1024,1024)
  StartDrawing(TextureOutput(tex_rod))
  Box(0, 0, TextureWidth(tex_rod), TextureHeight(tex_rod), RGB(170, 68, 0))
  StopDrawing()
  material_rod=CreateMaterial(#PB_Any,TextureID(tex_rod))
  
  tex_plate=CreateTexture(#PB_Any,1024,1024)
  StartDrawing(TextureOutput(tex_plate))
  Box(0, 0, TextureWidth(tex_plate), TextureHeight(tex_plate), RGB(255, 218, 65))
  StopDrawing()
  material_plate=CreateMaterial(#PB_Any,TextureID(tex_plate))
  
  tex_ground=CreateTexture(#PB_Any,1024,1024)
  StartDrawing(TextureOutput(tex_ground))
  Box(0, 0, TextureWidth(tex_ground), TextureHeight(tex_ground), RGB(200, 200, 200))
  StopDrawing()
  material_ground=CreateMaterial(#PB_Any,TextureID(tex_ground))
  DisableMaterialLighting(material_ground,#True)
  
  ; node for Light and Billboard (Sun)
  node_lightwhite1=CreateNode(#PB_Any, 0, 3000, 0)
  
  ;Create light
  light_white1=CreateLight(#PB_Any, RGB(255, 255, 255), 0, 3000, 0)
  AttachNodeObject(node_lightwhite1, LightID(light_white1))
  
  ; Create flare
  tex_flare=CreateTexture(#PB_Any,1024,1024)
  StartDrawing(TextureOutput(tex_flare))
  Box(0, 0, TextureWidth(tex_flare), TextureHeight(tex_flare), RGB(255, 255, 255))
  StopDrawing()
  material=CreateMaterial(#PB_Any, TextureID(tex_flare))
  DisableMaterialLighting(material, 1)
  
  billboard=CreateBillboardGroup(#PB_Any, MaterialID(material), 2048, 2048)
  AddBillboard(billboard, 0, 3000, 0)
  AttachNodeObject(node_lightwhite1, BillboardGroupID(billboard))
  
  node_lightwhite2=CreateNode(#PB_Any, 0, 3000, 0)
  
  ;Create light
  light_white2=CreateLight(#PB_Any, RGB(255, 255, 255), 0, 3000, 0)
  AttachNodeObject(node_lightwhite2, LightID(light_white2))
  billboard2=CreateBillboardGroup(#PB_Any, MaterialID(material), 2048, 2048)
  AddBillboard(billboard2, 0, 3000, 0)
  ; Create flare
  AttachNodeObject(node_lightwhite2, BillboardGroupID(billboard2))
  
  
  ; Static geometry
  ;
  
  ; Create Entity
  sphere_m=CreateSphere(#PB_Any, (sphere_diameter+1)/2*1.12,32,32)
  sphere_e=CreateEntity(#PB_Any, MeshID(sphere_m), MaterialID(material_sphere))
  cylinder_m=CreateCylinder(#PB_Any, (rod_diameter+1)/2*1.12,rod_length+1,8,1,#True)
  cylinder_e=CreateEntity(#PB_Any, MeshID(cylinder_m), MaterialID(material_rod))  
  cube_m=CreateCube(#PB_Any, 1)
  cube_e=CreateEntity(#PB_Any, MeshID(cube_m), MaterialID(material_plate))
  ground_m=CreateCube(#PB_Any, 1)
  ground_e=CreateEntity(#PB_Any, MeshID(ground_m), MaterialID(material_ground))
  EntityRenderMode(cube_e, #PB_Entity_CastShadow)
  EntityRenderMode(cylinder_e, #PB_Entity_CastShadow)
  EntityRenderMode(sphere_e, #PB_Entity_CastShadow)
  EntityRenderMode(ground_e, #PB_Entity_CastShadow)
  
  FreeStaticGeometry(geometry)

  ; Create Static geometry
  geometry=CreateStaticGeometry(#PB_Any, nx, ny, nz, #True)
  
    If mode=1
    For n=0 To nr_clusters
      For i=0 To ArraySize(clusters(n)\particles())
        If clusters(n)\particles(i)\id=1
          AddStaticGeometryEntity(geometry,EntityID(sphere_e),(clusters(n)\particles(i)\maxx+clusters(n)\particles(i)\minx)/2,(clusters(n)\particles(i)\maxy+clusters(n)\particles(i)\miny)/2,(clusters(n)\particles(i)\maxz+clusters(n)\particles(i)\minz)/2)
        EndIf
        If clusters(n)\particles(i)\id=2
          
          ; AddStaticGeometryEntity(geometry,EntityID(cylinder_e),(clusters(n)\particles(i)\maxx+clusters(n)\particles(i)\minx)/2,(clusters(n)\particles(i)\maxy+clusters(n)\particles(i)\miny)/2,(clusters(n)\particles(i)\maxz+clusters(n)\particles(i)\minz)/2,1,1,1,staticpitch,staticyaw,staticroll);,0, #PB_Orientation_Direction)
          AddStaticGeometryEntity(geometry,EntityID(cylinder_e),(clusters(n)\particles(i)\maxx+clusters(n)\particles(i)\minx)/2,(clusters(n)\particles(i)\maxy+clusters(n)\particles(i)\miny)/2,(clusters(n)\particles(i)\maxz+clusters(n)\particles(i)\minz)/2,1,1,1,clusters(n)\particles(i)\rot\x,clusters(n)\particles(i)\rot\y,clusters(n)\particles(i)\rot\z,clusters(n)\particles(i)\rot\w, #PB_Orientation_Quaternion)
          ;  AddStaticGeometryEntity(geometry,EntityID(cylinder_e),(clusters(n)\particles(i)\maxx+clusters(n)\particles(i)\minx)/2,(clusters(n)\particles(i)\maxy+clusters(n)\particles(i)\miny)/2,(clusters(n)\particles(i)\maxz+clusters(n)\particles(i)\minz)/2,1,1,1,0,0,0,1, #PB_Orientation_Quaternion)
        EndIf
        If clusters(n)\particles(i)\id=3
          AddStaticGeometryEntity(geometry,EntityID(cube_e),(clusters(n)\particles(i)\maxx+clusters(n)\particles(i)\minx)/2,(clusters(n)\particles(i)\maxy+clusters(n)\particles(i)\miny)/2,(clusters(n)\particles(i)\maxz+clusters(n)\particles(i)\minz)/2,plate_length+1,plate_width+1,plate_thickness+1,clusters(n)\particles(i)\rot\x,clusters(n)\particles(i)\rot\y,clusters(n)\particles(i)\rot\z,clusters(n)\particles(i)\rot\w, #PB_Orientation_Quaternion)
        EndIf
      Next i
      
      
    Next n
  EndIf
  If mode=2
    n=nr_largest_cluster
    For i=0 To ArraySize(clusters(n)\particles())
      If clusters(n)\particles(i)\id=1
        AddStaticGeometryEntity(geometry,EntityID(sphere_e),(clusters(n)\particles(i)\maxx+clusters(n)\particles(i)\minx)/2,(clusters(n)\particles(i)\maxy+clusters(n)\particles(i)\miny)/2,(clusters(n)\particles(i)\maxz+clusters(n)\particles(i)\minz)/2)
      EndIf
      If clusters(n)\particles(i)\id=2
        
        ; AddStaticGeometryEntity(geometry,EntityID(cylinder_e),(clusters(n)\particles(i)\maxx+clusters(n)\particles(i)\minx)/2,(clusters(n)\particles(i)\maxy+clusters(n)\particles(i)\miny)/2,(clusters(n)\particles(i)\maxz+clusters(n)\particles(i)\minz)/2,1,1,1,staticpitch,staticyaw,staticroll);,0, #PB_Orientation_Direction)
        AddStaticGeometryEntity(geometry,EntityID(cylinder_e),(clusters(n)\particles(i)\maxx+clusters(n)\particles(i)\minx)/2,(clusters(n)\particles(i)\maxy+clusters(n)\particles(i)\miny)/2,(clusters(n)\particles(i)\maxz+clusters(n)\particles(i)\minz)/2,1,1,1,clusters(n)\particles(i)\rot\x,clusters(n)\particles(i)\rot\y,clusters(n)\particles(i)\rot\z,clusters(n)\particles(i)\rot\w, #PB_Orientation_Quaternion)
        ;  AddStaticGeometryEntity(geometry,EntityID(cylinder_e),(clusters(n)\particles(i)\maxx+clusters(n)\particles(i)\minx)/2,(clusters(n)\particles(i)\maxy+clusters(n)\particles(i)\miny)/2,(clusters(n)\particles(i)\maxz+clusters(n)\particles(i)\minz)/2,1,1,1,0,0,0,1, #PB_Orientation_Quaternion)
      EndIf
      If clusters(n)\particles(i)\id=3
        AddStaticGeometryEntity(geometry,EntityID(cube_e),(clusters(n)\particles(i)\maxx+clusters(n)\particles(i)\minx)/2,(clusters(n)\particles(i)\maxy+clusters(n)\particles(i)\miny)/2,(clusters(n)\particles(i)\maxz+clusters(n)\particles(i)\minz)/2,plate_length+1,plate_width+1,plate_thickness+1,clusters(n)\particles(i)\rot\x,clusters(n)\particles(i)\rot\y,clusters(n)\particles(i)\rot\z,clusters(n)\particles(i)\rot\w, #PB_Orientation_Quaternion)
      EndIf
    Next i
  EndIf 
  ; Build the static geometry
  AddStaticGeometryEntity(geometry,EntityID(ground_e),nx/2,-1,nz/2,nx,1,nz)
  
;   AddStaticGeometryEntity(geometry,EntityID(ground_e),-1,ny/2,nz/2,1,ny,nz)
;    AddStaticGeometryEntity(geometry,EntityID(ground_e),nx/2,ny/2,nz+1,nx,ny,1)
  
  BuildStaticGeometry(geometry)
  
  FreeEntity(cube_e)
  FreeEntity(sphere_e)
  FreeEntity(cylinder_e)
  
  ; Camera
  ;
  
  Repeat
    Screen3DEvents()
    
    If ExamineMouse()
      
      Yaw   = -MouseDeltaX() * 0.05
      Pitch = -MouseDeltaY() * 0.05
      
      
    EndIf
    
    If ExamineKeyboard()
      
      If KeyboardPushed(#PB_Key_Up) Or KeyboardPushed(#PB_Key_W)   
        MoveCamera(camera,  0, 0, -2 * Boost)
      ElseIf KeyboardPushed(#PB_Key_Down) Or KeyboardPushed(#PB_Key_S)  
        MoveCamera(camera,  0, 0,  2 * Boost)
      EndIf 
      
      If KeyboardPushed(#PB_Key_Left) Or KeyboardPushed(#PB_Key_A)   
        MoveCamera(camera, -2 * Boost, 0, 0) 
      ElseIf KeyboardPushed(#PB_Key_Right) Or KeyboardPushed(#PB_Key_D)  
        MoveCamera(camera,  2 * Boost, 0, 0)
      EndIf 
      
    EndIf
    
    ; Sun
    If KeyboardReleased(#PB_Key_L)
      shadows+1
      If shadows=4:shadows+1:EndIf
      If shadows=6:shadows=0:EndIf
      WorldShadows(shadows)
    EndIf  
    If KeyboardPushed(#PB_Key_Space)
      sunmove.d+0.005
      nodex = 10000 * Cos(sunmove)
      nodez = 10000 * Sin(sunmove)   
      MoveNode(node_lightwhite1, nodex, 3000, nodez, #PB_Absolute)
      MoveNode(node_lightwhite2, 3000, nodez, nodex, #PB_Absolute)
    EndIf
    RotateCamera(camera, Pitch, Yaw, 0, #PB_Relative)
    If mode=1
      StartDrawing(SpriteOutput(stats3))
      ;Box(SpriteWidth(sprit)
      DrawText(1,1,"Shadow: "+Str(shadows)+ " FOV: "+Str(fov)+ " Camera: x:"+StrD(CameraX(camera),2)+" y:"+StrD(CameraY(camera),2)+" z:"+StrD(CameraZ(camera),2)+" pitch:"+StrD(CameraDirectionX(camera),2)+" yaw:"+StrD(CameraDirectionY(camera),2)+" roll:"+StrD(CameraDirectionZ(camera),2))
      DrawText(1,21," Esc:return  WASD:Controls  hold Space:Move light soruce  L:select light/shadow mode  +/-:change FOV  P:take screenshot  T:restore camera position  G:save camera position")

      StopDrawing()
    EndIf
    RenderWorld()
    Screen3DStats()
    If mode =1 :DisplaySprite(stats3,1,1):EndIf
    FlipBuffers()
    
    If KeyboardPushed(#PB_Key_Add)
      fov+0.1
      CameraFOV(camera,fov)
    EndIf  
    If KeyboardPushed(#PB_Key_Subtract)
      fov-0.1
      CameraFOV(camera,fov)
    EndIf  
    
    If KeyboardReleased(#PB_Key_P)
      hImage = CreateImage(#PB_Any,deskwidth,deskheight,32)
      If hImage
        hDC = StartDrawing(ImageOutput(hImage))
        If hDC
          DeskDC = GetDC_(GetDesktopWindow_())
          If DeskDC
            BitBlt_(hDC,0,0,deskwidth,deskheight,DeskDC,0,0,#SRCCOPY)
          EndIf
          ReleaseDC_(GetDesktopWindow_(),DeskDC)
        EndIf
        StopDrawing()
      EndIf
      SaveImage(hImage,"screencap.png",#PB_ImagePlugin_PNG )
      
    EndIf  
    
      If KeyboardReleased(#PB_Key_T)
        fov=camfov
        CameraFOV(camera,camfov)
        MoveCamera(camera,camx,camy,camz,#PB_Absolute )
        CameraDirection(camera,dircamx,dircamy,dircamz)
      EndIf  
      
     If KeyboardReleased(#PB_Key_G)
        camfov=fov
        camx=CameraX(camera)
        camy=CameraY(camera)
        camz=CameraZ(camera)
        dircamx=CameraDirectionX(camera)
        dircamy=CameraDirectionY(camera)
        dircamz=CameraDirectionZ(camera) 
        OpenPreferences(GetCurrentDirectory()+"init.dat")
        WritePreferenceDouble("DLA_camx", camx)
        WritePreferenceDouble("DLA_camy",camy)
        WritePreferenceDouble("DLA_camz",camz)
        WritePreferenceDouble("DLA_dircamx",dircamx)
        WritePreferenceDouble("DLA_dircamy",dircamy)
        WritePreferenceDouble("DLA_dircamz",dircamz)
        WritePreferenceDouble("DLA_camfov",camfov)
        ClosePreferences()
     EndIf   
    
  Until KeyboardReleased(#PB_Key_Escape)
  FreeStaticGeometry(geometry)

  FreeSprite(stats3)
  For i=0 To nr_clusters
    For j=0 To ArraySize(clusters(i)\particles())
      HideEntity(clusters(i)\particles(j)\entity_handle,#False)
    Next j
  Next i 
  
  ReleaseMouse(1)

    
EndProcedure  

InitEngine3D()
InitSprite()
InitKeyboard()
InitMouse()
ExamineDesktops()

open_parameters_window()
sizex=nx*scale_x+scale_z*nz
sizey=ny*scale_y+scale_z*nz
deskwidth=800+sizex
deskheight=700+sizey
im_aggregate=CreateImage(#PB_Any,200+sizex,400+sizey,32,RGB(255,255,255))
im_DLVO=CreateImage(#PB_Any,400,900,32,RGB(255,255,255))
set_mineral_shapes()
set_interaction_energies()

;get_histograms()

OpenWindow(#Win_Plot,10,10,deskwidth,deskheight,"Welcome to Aggregation Modeling")
;OpenWindowedScreen(WindowID(#Win_Plot),0,0,800+sizex,700+sizey,0,0,0)
;sprite=CreateSprite(#PB_Any,800+sizex,700+sizey)

AntialiasingMode(#PB_AntialiasingMode_x6)
OpenWindowedScreen(WindowID(#Win_Plot),0,0,deskwidth,deskheight,0,0,0)
sprite=CreateSprite(#PB_Any,deskwidth,deskheight)
;stats=CreateSprite(#PB_Any,deskwidth,40)
;import_sprite=LoadSprite(#PB_Any, #PB_Compiler_Home + "examples/sources/Data/PureBasicLogo.bmp")

fov.d
Define.f KeyX, KeyY, MouseX, MouseY
Define nodex.f, nodez.f, Boost.f = 1, Yaw.f, Pitch.f

fov=70
stats.i=CreateSprite(#PB_Any,deskwidth,40)

WorldShadows(3)

AmbientColor(0)

tex_sphere=CreateTexture(#PB_Any,1024,1024)
StartDrawing(TextureOutput(tex_sphere))
Box(0, 0, TextureWidth(tex_sphere), TextureHeight(tex_sphere), RGB(17, 175, 214))
StopDrawing()
material_sphere=CreateMaterial(#PB_Any,TextureID(tex_sphere))

tex_rod=CreateTexture(#PB_Any,1024,1024)
StartDrawing(TextureOutput(tex_rod))
Box(0, 0, TextureWidth(tex_rod), TextureHeight(tex_rod), RGB(170, 68, 0))
StopDrawing()
material_rod=CreateMaterial(#PB_Any,TextureID(tex_rod))

tex_plate=CreateTexture(#PB_Any,1024,1024)
StartDrawing(TextureOutput(tex_plate))
Box(0, 0, TextureWidth(tex_plate), TextureHeight(tex_plate), RGB(255, 218, 65))
StopDrawing()
material_plate=CreateMaterial(#PB_Any,TextureID(tex_plate))

tex_ground=CreateTexture(#PB_Any,1024,1024)
StartDrawing(TextureOutput(tex_ground))
Box(0, 0, TextureWidth(tex_ground), TextureHeight(tex_ground), RGB(200, 200, 200))
StopDrawing()
material_ground=CreateMaterial(#PB_Any,TextureID(tex_ground))
DisableMaterialLighting(material_ground,#True)


; Create Entity
sphere_m=CreateSphere(#PB_Any, (sphere_diameter+1)/2*1.12,32,32)
cylinder_m=CreateCylinder(#PB_Any, (rod_diameter+1)/2*1.12,rod_length+1,8,1,#True)
cube_m=CreateCube(#PB_Any, 1)
TransformMesh(cube_m, 0, 0, 0, plate_length+1,plate_width+1,plate_thickness+1,0,0,0)
ground_m=CreateCube(#PB_Any, 1)

ground_e=CreateEntity(#PB_Any, MeshID(ground_m), MaterialID(material_ground))
EntityRenderMode(ground_e, #PB_Entity_CastShadow)
geometry=CreateStaticGeometry(#PB_Any, nx, ny, nz, #True)

; node for Light and Billboard (Sun)
node_lightwhite1=CreateNode(#PB_Any, 0, 3000, 0)

;Create light
light_white1=CreateLight(#PB_Any, RGB(255, 255, 255), 0, 3000, 0)
AttachNodeObject(node_lightwhite1, LightID(light_white1))

; Create flare
tex_flare=CreateTexture(#PB_Any,1024,1024)
StartDrawing(TextureOutput(tex_flare))
Box(0, 0, TextureWidth(tex_flare), TextureHeight(tex_flare), RGB(255, 255, 255))
StopDrawing()
material=CreateMaterial(#PB_Any, TextureID(tex_flare))
DisableMaterialLighting(material, 1)

billboard=CreateBillboardGroup(#PB_Any, MaterialID(material), 2048, 2048)
AddBillboard(billboard, 0, 3000, 0)
AttachNodeObject(node_lightwhite1, BillboardGroupID(billboard))

node_lightwhite2=CreateNode(#PB_Any, 0, 3000, 0)

;Create light
light_white2=CreateLight(#PB_Any, RGB(255, 255, 255), 0, 3000, 0)
AttachNodeObject(node_lightwhite2, LightID(light_white2))
billboard2=CreateBillboardGroup(#PB_Any, MaterialID(material), 2048, 2048)
AddBillboard(billboard2, 0, 3000, 0)
; Create flare
AttachNodeObject(node_lightwhite2, BillboardGroupID(billboard2))


; Static geometry
;
AddStaticGeometryEntity(geometry,EntityID(ground_e),nx/2,-1,nz/2,nx,1,nz)
;FreeEntity(ground_e)
BuildStaticGeometry(geometry)

; Camera
;
camera=CreateCamera(#PB_Any, 0, 0, 100, 100)
MoveCamera(camera, 0, 0, 0, #PB_Absolute)
CameraLookAt(camera, 0, 0, 1)
CameraRange (camera, 2, 5000)
CameraFOV   (camera, fov)
CameraBackColor(camera, RGB(255, 255, 255))

; Create Static geometry
init_field()

FreeMaterial(#PB_All)

attach.attach_info
get_histograms()
If mode=1
    calculate_fractals=0
    calculate_gyration=0
  Else
      calculate_fractals=1
      calculate_gyration=1
      EndIf
Repeat  
  event=WindowEvent()
  ExamineKeyboard()
  
 ; If KeyboardPushed(#PB_Key_F):calculate_fractals=1:EndIf

  elapsedtime=ElapsedMilliseconds()
  changed=0
  
  max.d=0
  For i=0 To nr_clusters
    If clusters(i)\diff>max:max=clusters(i)\diff:EndIf
  Next i
  timestepdiff.d=2/9*dx*dx/max

  If sediment
  max.d=0
  For i=0 To nr_clusters
    temp.d=1650000*9.81*dx*dx*dx*clusters(i)\mass/(6*#PI*clusters(i)\hydrodyn)
    If temp>max And clusters(i)\miny>0:max=temp:EndIf
  Next i  
  timestepsedi.d=dx/temp
Else
  timestepsedi.d=Pow(10,30)
  EndIf
  If timestepdiff<timestepsedi    
    timestep=timestepdiff    
  Else
    timestep=timestepsedi    
  EndIf  
  
  
  ;       Debug "--_"
  ;       Debug min
        
  i=-1
  Repeat
    
    i+1
    
    If allow_detach
      j=-1
      Repeat 
        j+1      
        ForEach clusters(i)\particles(j)\attached_to()
          If random_cont(1,18)<=chances_detach(clusters(i)\particles(j)\id,clusters(i)\particles(clusters(i)\particles(j)\attached_to())\id)
            pass=clusters(i)\particles(j)\attached_to()
            DeleteElement(clusters(i)\particles(j)\attached_to())
            detach(i,pass)     
            
            For k=0 To ArraySize(clusters(nr_clusters)\particles())
              For l=0 To ArraySize(clusters(nr_clusters)\particles(k)\points())
                field_info(clusters(nr_clusters)\particles(k)\points(l)\x,clusters(nr_clusters)\particles(k)\points(l)\y,clusters(nr_clusters)\particles(k)\points(l)\z)\cluster=nr_clusters+1
                field_info(clusters(nr_clusters)\particles(k)\points(l)\x,clusters(nr_clusters)\particles(k)\points(l)\y,clusters(nr_clusters)\particles(k)\points(l)\z)\particle=k+1
              Next l
            Next k
            
            For k=0 To ArraySize(clusters(i)\particles())
              For l=0 To ArraySize(clusters(i)\particles(k)\points())
                field_info(clusters(i)\particles(k)\points(l)\x,clusters(i)\particles(k)\points(l)\y,clusters(i)\particles(k)\points(l)\z)\particle=k+1
              Next l
            Next k
            
          EndIf
          ;check if the particle still exists in that cluster; shouldnt be happening??
          If j>ArraySize(clusters(i)\particles()):Break(1):EndIf
        Next 
      Until j>=ArraySize(clusters(i)\particles())-1
      
    EndIf  
    
    If i=0 And (mode=1 Or mode=3):Continue:EndIf
    If random_cont(1,6)<=timestep/(2/9*dx*dx/clusters(i)\diff)  ;roll if it moves due to diff-coeff
                                               ;CopyStructure(@clusters(i),@movetemp,cluster)
      For j=0 To ArraySize(clusters(i)\particles())
        For k=0 To ArraySize(clusters(i)\particles(j)\points())
          profiles(field(clusters(i)\particles(j)\points(k)\x,clusters(i)\particles(j)\points(k)\y,clusters(i)\particles(j)\points(k)\z),clusters(i)\particles(j)\points(k)\y)-1
          field(clusters(i)\particles(j)\points(k)\x,clusters(i)\particles(j)\points(k)\y,clusters(i)\particles(j)\points(k)\z)=0
          field_info(clusters(i)\particles(j)\points(k)\x,clusters(i)\particles(j)\points(k)\y,clusters(i)\particles(j)\points(k)\z)\cluster=0          
          field_info(clusters(i)\particles(j)\points(k)\x,clusters(i)\particles(j)\points(k)\y,clusters(i)\particles(j)\points(k)\z)\particle=0
        Next k  
      Next j
      
      If allow_rotate:rotate_cluster(@clusters(i),Random(6)):EndIf
 
      move_cluster(@clusters(i))
      
      For j=0 To ArraySize(clusters(i)\particles())
        For k=0 To ArraySize(clusters(i)\particles(j)\points())
          field(clusters(i)\particles(j)\points(k)\x,clusters(i)\particles(j)\points(k)\y,clusters(i)\particles(j)\points(k)\z)=clusters(i)\particles(j)\id
          profiles(field(clusters(i)\particles(j)\points(k)\x,clusters(i)\particles(j)\points(k)\y,clusters(i)\particles(j)\points(k)\z),clusters(i)\particles(j)\points(k)\y)+1
          field_info(clusters(i)\particles(j)\points(k)\x,clusters(i)\particles(j)\points(k)\y,clusters(i)\particles(j)\points(k)\z)\cluster=i+1
          field_info(clusters(i)\particles(j)\points(k)\x,clusters(i)\particles(j)\points(k)\y,clusters(i)\particles(j)\points(k)\z)\particle=j+1
        Next k  
      Next j
      
      If allow_attach:check_attachment(@clusters(i),i+1,@attach):EndIf
              
      If attach\attached_to_cluster
        attach\attached_to_cluster-1
        count_attach_type(i,attach\attached_to_cluster)
        For j=0 To ArraySize(clusters(i)\particles())
          For k=0 To ArraySize(clusters(i)\particles(j)\points())
            field_info(clusters(i)\particles(j)\points(k)\x,clusters(i)\particles(j)\points(k)\y,clusters(i)\particles(j)\points(k)\z)\cluster=attach\attached_to_cluster+1
            field_info(clusters(i)\particles(j)\points(k)\x,clusters(i)\particles(j)\points(k)\y,clusters(i)\particles(j)\points(k)\z)\particle+clusters(attach\attached_to_cluster)\nr_particles
           ; field_info(clusters(attach\attached_to_cluster)\particles(j)\points(k)\x,clusters(attach\attached_to_cluster)\particles(j)\points(k)\y,clusters(attach\attached_to_cluster)\particles(j)\points(k)\z)\cluster=i+1
           ; field_info(clusters(attach\attached_to_cluster)\particles(j)\points(k)\x,clusters(attach\attached_to_cluster)\particles(j)\points(k)\y,clusters(attach\attached_to_cluster)\particles(j)\points(k)\z)\particle+clusters(i)\nr_particles  
          Next k  
        Next j
       ; If i=attach\attached_to_cluster:CallDebugger:EndIf
        merge_clusters(attach\attached_to_cluster,i,attach\attached_to_particle,attach\attaching_part)
        
        If i>=nr_clusters:Break(1):EndIf
      EndIf
      
    EndIf
    
;     If 2/9*clusters(i)\hydrodyn*clusters(i)\hydrodyn*9.81*1650000*timestep/dx>=1
;     tempd.d=2/9*clusters(i)\hydrodyn*clusters(i)\hydrodyn*9.81*1650000*timestep/dx  
;     CallDebugger:EndIf
 ;Debug 2/9*clusters(i)\hydrodyn*clusters(i)\hydrodyn*9.81*1650000*timestep/dx
 ;Debug  clusters(i)\mass*dx*dx*dx*9.81*1650000/6/#PI/clusters(i)\hydrodyn*timestep/dx
 ;   test.f = (2/9*clusters(i)\hydrodyn*clusters(i)\hydrodyn*9.81*1650000)/(clusters(i)\mass*dx*dx*dx*9.81*1650000/6/#PI/clusters(i)\hydrodyn)
; If test>10 :Debug  (2/9*clusters(i)\hydrodyn*clusters(i)\hydrodyn*9.81*1650000)/(clusters(i)\mass*dx*dx*dx*9.81*1650000/6/#PI/clusters(i)\hydrodyn):EndIf
    ;;Debug "---"
    
    ;If sediment And random_cont(1,6)<=timestep/(dx/(2/9*clusters(i)\hydrodyn*clusters(i)\hydrodyn*9.81*1650000))
      If sediment And random_cont(1,6)<=timestep/(dx/(clusters(i)\mass*dx*dx*dx*9.81*1650000/6/#PI/clusters(i)\hydrodyn))
      
      
      For j=0 To ArraySize(clusters(i)\particles())
        For k=0 To ArraySize(clusters(i)\particles(j)\points())
          profiles(field(clusters(i)\particles(j)\points(k)\x,clusters(i)\particles(j)\points(k)\y,clusters(i)\particles(j)\points(k)\z),clusters(i)\particles(j)\points(k)\y)-1
          field(clusters(i)\particles(j)\points(k)\x,clusters(i)\particles(j)\points(k)\y,clusters(i)\particles(j)\points(k)\z)=0
          field_info(clusters(i)\particles(j)\points(k)\x,clusters(i)\particles(j)\points(k)\y,clusters(i)\particles(j)\points(k)\z)\cluster=0
          field_info(clusters(i)\particles(j)\points(k)\x,clusters(i)\particles(j)\points(k)\y,clusters(i)\particles(j)\points(k)\z)\particle=0  
        Next k  
      Next j
      
      sediment_cluster(@clusters(i))
      
      For j=0 To ArraySize(clusters(i)\particles())
        For k=0 To ArraySize(clusters(i)\particles(j)\points())
          field(clusters(i)\particles(j)\points(k)\x,clusters(i)\particles(j)\points(k)\y,clusters(i)\particles(j)\points(k)\z)=clusters(i)\particles(j)\id
          profiles(field(clusters(i)\particles(j)\points(k)\x,clusters(i)\particles(j)\points(k)\y,clusters(i)\particles(j)\points(k)\z),clusters(i)\particles(j)\points(k)\y)+1
          field_info(clusters(i)\particles(j)\points(k)\x,clusters(i)\particles(j)\points(k)\y,clusters(i)\particles(j)\points(k)\z)\cluster=i+1
          field_info(clusters(i)\particles(j)\points(k)\x,clusters(i)\particles(j)\points(k)\y,clusters(i)\particles(j)\points(k)\z)\particle=j+1  
        Next k  
      Next j
      
      If allow_attach:check_attachment(@clusters(i),i+1,@attach):EndIf
      ;Debug attach
     If attach\attached_to_cluster
       attach\attached_to_cluster-1
       count_attach_type(i,attach\attached_to_cluster)  
        For j=0 To ArraySize(clusters(i)\particles())
          For k=0 To ArraySize(clusters(i)\particles(j)\points())
            field_info(clusters(i)\particles(j)\points(k)\x,clusters(i)\particles(j)\points(k)\y,clusters(i)\particles(j)\points(k)\z)\cluster=attach\attached_to_cluster+1
            field_info(clusters(i)\particles(j)\points(k)\x,clusters(i)\particles(j)\points(k)\y,clusters(i)\particles(j)\points(k)\z)\particle+clusters(attach\attached_to_cluster)\nr_particles  
          Next k  
        Next j
        merge_clusters(attach\attached_to_cluster,i,attach\attached_to_particle,attach\attaching_part)
        If i>=nr_clusters:Break(1):EndIf
      EndIf
    EndIf
    
  Until i>=nr_clusters
  
  time+timestep
  counter+1
  get_histograms()
  
  elapsedtime=ElapsedMilliseconds()-elapsedtime
  
  drawtimer+1
  If IsScreenActive()
    
   If render
      Screen3DEvents()
      
      If ExamineMouse()
        
        Yaw   = -MouseDeltaX() * 0.05
        Pitch = -MouseDeltaY() * 0.05
        
        
      EndIf
      
      If ExamineKeyboard()
        
        If KeyboardPushed(#PB_Key_Up) Or KeyboardPushed(#PB_Key_W)   
          MoveCamera(camera,  0, 0, -2 * Boost)
        ElseIf KeyboardPushed(#PB_Key_Down) Or KeyboardPushed(#PB_Key_S)  
          MoveCamera(camera,  0, 0,  2 * Boost)
        EndIf 
        
        If KeyboardPushed(#PB_Key_Left) Or KeyboardPushed(#PB_Key_A)   
          MoveCamera(camera, -2 * Boost, 0, 0) 
        ElseIf KeyboardPushed(#PB_Key_Right) Or KeyboardPushed(#PB_Key_D)  
          MoveCamera(camera,  2 * Boost, 0, 0)
        EndIf 
        
      EndIf
      
      ; Sun
      If KeyboardReleased(#PB_Key_L)
        shadows+1
        If shadows=4:shadows+1:EndIf
        If shadows=6:shadows=0:EndIf
        WorldShadows(shadows)
      EndIf  
      If KeyboardPushed(#PB_Key_Space)
        sunmove.d+0.005
        nodex = 10000 * Cos(sunmove)
        nodez = 10000 * Sin(sunmove)   
        MoveNode(node_lightwhite1, nodex, 3000, nodez, #PB_Absolute)
        MoveNode(node_lightwhite2, 3000, nodez, nodex, #PB_Absolute)
      EndIf
      RotateCamera(camera, Pitch, Yaw, 0, #PB_Relative)
      
      StartDrawing(SpriteOutput(stats))
      ;Box(SpriteWidth(sprit)
      DrawText(1,1,"Shadow: "+Str(shadows)+ " FOV: "+Str(fov)+ " Camera: x:"+StrD(CameraX(camera),2)+" y:"+StrD(CameraY(camera),2)+" z:"+StrD(CameraZ(camera),2)+" pitch:"+StrD(CameraDirectionX(camera),2)+" yaw:"+StrD(CameraDirectionY(camera),2)+" roll:"+StrD(CameraDirectionZ(camera),2))
      DrawText(1,21," 4:return  WASD:Controls  hold Space:Move light soruce  L:select light/shadow mode  +/-:change FOV  P:take screenshot  T:restore camera position  G:save camera position")
      StopDrawing()
      
      RenderWorld()
      Screen3DStats()
      DisplaySprite(stats,1,1)
      FlipBuffers()
      
      If KeyboardPushed(#PB_Key_Add)
        fov+0.1
        CameraFOV(camera,fov)
      EndIf  
      If KeyboardPushed(#PB_Key_Subtract)
        fov-0.1
        CameraFOV(camera,fov)
      EndIf  
      
      If KeyboardPushed(#PB_Key_P)
        
        hImage = CreateImage(#PB_Any,deskwidth,deskheight,32)
        If hImage
          hDC = StartDrawing(ImageOutput(hImage))
          If hDC
            DeskDC = GetDC_(GetDesktopWindow_())
            If DeskDC
              BitBlt_(hDC,0,0,deskwidth,deskheight,DeskDC,0,0,#SRCCOPY)
            EndIf
            ReleaseDC_(GetDesktopWindow_(),DeskDC)
          EndIf
          StopDrawing()
        EndIf
        SaveImage(hImage,"screencap.png",#PB_ImagePlugin_PNG)        
      EndIf 
      
      If KeyboardReleased(#PB_Key_T)
        fov=camfov
        CameraFOV(camera,camfov)
        MoveCamera(camera,camx,camy,camz,#PB_Absolute )
        CameraDirection(camera,dircamx,dircamy,dircamz)
      EndIf  
      
     If KeyboardReleased(#PB_Key_G)
        camfov=fov
        camx=CameraX(camera)
        camy=CameraY(camera)
        camz=CameraZ(camera)
        dircamx=CameraDirectionX(camera)
        dircamy=CameraDirectionY(camera)
        dircamz=CameraDirectionZ(camera) 
        OpenPreferences(GetCurrentDirectory()+"init.dat")
        WritePreferenceDouble("DLA_camx", camx)
        WritePreferenceDouble("DLA_camy",camy)
        WritePreferenceDouble("DLA_camz",camz)
        WritePreferenceDouble("DLA_dircamx",dircamx)
        WritePreferenceDouble("DLA_dircamy",dircamy)
        WritePreferenceDouble("DLA_dircamz",dircamz)
        WritePreferenceDouble("DLA_camfov",camfov)
        ClosePreferences()
     EndIf  
      

      
    Else 
      If mode=0
        If changed:draw():EndIf
      Else
        draw()
      EndIf
    EndIf
  EndIf
  ; If drawtimer>50:draw():drawtimer=0:EndIf
  
  If KeyboardPushed(#PB_Key_Escape) Or event=#PB_Event_CloseWindow
    
    If MessageRequester("Info","Do you really want to quit?",#PB_MessageRequester_YesNo)=#PB_MessageRequester_Yes:quit=1:EndIf
    
  EndIf    
  
  If KeyboardReleased(#PB_Key_4)
    If render=1
      
      render=0 
      ReleaseMouse(1)
      
    Else
      
      render=1 
      ReleaseMouse(0)     
      
    EndIf
    
  EndIf  
  
;   If KeyboardPushed(#PB_Key_LeftControl) And KeyboardPushed(#PB_Key_E)
;     CreateFile(0,"DLVO_curves.txt")
;     WriteStringN(0,"sphere/sphere"+Chr(9)+"sphere/rod"+Chr(9)+"sphere/plate"+Chr(9)+"rod/rod"+Chr(9)+"rod/plate"+Chr(9)+"plate/plate")
;     For i=0 To 1000
;       WriteStringN(0,StrD(dlvo_sphere_sphere(i))+Chr(9)+StrD(dlvo_sphere_rod(i))+Chr(9)+StrD(dlvo_sphere_plate(i))+Chr(9)+StrD(dlvo_rod_rod(i))+Chr(9)+StrD(dlvo_rod_plate(i))+Chr(9)+StrD(dlvo_plate_plate(i)))
;     Next i  
;     CloseFile(0)
;   EndIf  
  
  If KeyboardPushed(#PB_Key_LeftControl) And KeyboardPushed(#PB_Key_C)
    End
  EndIf
  
  If KeyboardPushed(#PB_Key_3)
    
    aggregate_3d(1)    
    geometry=CreateStaticGeometry(#PB_Any, nx, ny, nz, #True)
    AddStaticGeometryEntity(geometry,EntityID(ground_e),nx/2,-1,nz/2,nx,1,nz)
    BuildStaticGeometry(geometry)

  EndIf  
  
  
  
  If KeyboardPushed(#PB_Key_E)
    export_data("time_"+StrD(time))
  EndIf  
  
  If KeyboardReleased(#PB_Key_D)
    If show_dlvo=0:show_dlvo=1:Else:show_dlvo=0:EndIf
  EndIf  
  
  If check_termination()
    If MessageRequester("Info","Termination criterion reached"+Chr(13)+Chr(10)+"Quit?",#PB_MessageRequester_YesNo)=#PB_MessageRequester_Yes:quit=1:EndIf
    termination_type=1
  EndIf    
  
Until Quit = 1

export_data("final_time_"+StrD(time)) 

 If MessageRequester("Info","Export timeseries?"+Chr(13)+Chr(10)+StrD(time),#PB_MessageRequester_YesNo)=#PB_MessageRequester_Yes

  dir=ExamineDirectory(#PB_Any,GetCurrentDirectory()+"aggregateout","*.*")
  If Not IsDirectory(dir)
    CreateDirectory(GetCurrentDirectory()+"aggregateout")
  EndIf  
CreateFile(0,GetCurrentDirectory()+"aggregateout\timeseries.txt")

WriteStringN(0,"time [s]"+Chr(9)+"#clusters"+Chr(9)+"mass [n_voxels]"+Chr(9)+"hydrodyn. radius [m]"+Chr(9)+"radius of gyration [m]"+Chr(9)+"fractal dimension [-]"+Chr(9)+"Péclet [-]"+Chr(9)+"fraction free spheres"+Chr(9)+"fraction free rods"+Chr(9)+"fraction free plates"+Chr(9)+"n_attachments"+Chr(9)+"monomono"+Chr(9)+"monopoly"+Chr(9)+"polypoly"+Chr(9)+"mean_z_spheres"+Chr(9)+"sd_z_spheres"+Chr(9)+"mean_z_rods"+Chr(9)+"sd_z_rods"+Chr(9)+"mean_z_plates"+Chr(9)+"sd_z_plates"+Chr(9)+"corr_sphere_rod"+Chr(9)+"corr_sphere_plate"+Chr(9)+"corr_rod_plate"+Chr(9)+"bonds_sphere_sphere"+Chr(9)+"bonds_sphere_rod"+Chr(9)+"bonds_sphere_plate"+Chr(9)+"bonds_rod_rod"+Chr(9)+"bonds_rod_plate"+Chr(9)+"bonds_plate_plate")
For i=0 To n_timeseries
  sum.i=timeseries(i)\attach_type(0)+timeseries(i)\attach_type(1)+timeseries(i)\attach_type(2)
  WriteStringN(0,StrD(timeseries(i)\time)+Chr(9)+Str(timeseries(i)\nr_clus)+Chr(9)+StrD(timeseries(i)\mass)+Chr(9)+StrD(timeseries(i)\hydrodyn)+Chr(9)+StrD(timeseries(i)\gyration)+Chr(9)+StrD(timeseries(i)\fractal)+Chr(9)+StrD(timeseries(i)\peclet)+Chr(9)+StrD(timeseries(i)\freeparts(0))+Chr(9)+StrD(timeseries(i)\freeparts(1))+Chr(9)+StrD(timeseries(i)\freeparts(2))+Chr(9)+Str(sum)+Chr(9)+Str(timeseries(i)\attach_type(0))+Chr(9)+Str(timeseries(i)\attach_type(1))+Chr(9)+Str(timeseries(i)\attach_type(2))+Chr(9)+StrD(timeseries(i)\meanz_spheres)+Chr(9)+StrD(timeseries(i)\sdz_spheres)+Chr(9)+StrD(timeseries(i)\meanz_rods)+Chr(9)+StrD(timeseries(i)\sdz_rods)+Chr(9)+StrD(timeseries(i)\meanz_plates)+Chr(9)+StrD(timeseries(i)\sdz_plates)+Chr(9)+StrD(timeseries(i)\corr_sphererod)+Chr(9)+StrD(timeseries(i)\corr_sphereplate)+Chr(9)+StrD(timeseries(i)\corr_rodplate)+Chr(9)+Str(timeseries(i)\attach_minerals(0))+Chr(9)+Str(timeseries(i)\attach_minerals(1))+Chr(9)+Str(timeseries(i)\attach_minerals(2))+Chr(9)+Str(timeseries(i)\attach_minerals(3))+Chr(9)+Str(timeseries(i)\attach_minerals(4))+Chr(9)+Str(timeseries(i)\attach_minerals(5)))
Next i  
CloseFile(0)
EndIf

 If MessageRequester("Info","Display 3D?",#PB_MessageRequester_YesNo)=#PB_MessageRequester_Yes

  aggregate_3d(2)


EndIf


End

